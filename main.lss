
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001a0c  00001aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080017e  0080017e  00001b1e  2**0
                  ALLOC
  3 .stab         00004fa4  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f89  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00007a4d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00007a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001092  00000000  00000000  00007ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000570  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000390  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000024c  00000000  00000000  0000944c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000394  00000000  00000000  00009698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000050e  00000000  00000000  00009a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00009f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.2006>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.2004>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec e0       	ldi	r30, 0x0C	; 12
     17e:	fa e1       	ldi	r31, 0x1A	; 26
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 37       	cpi	r26, 0x7E	; 126
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	ae e7       	ldi	r26, 0x7E	; 126
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a3 3c       	cpi	r26, 0xC3	; 195
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
     1a0:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <uart_putchar>:
    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
}

int uart_putchar(char c, FILE *stream) {
    loop_until_bit_is_set(UCSR0A, UDRE0);
     1a8:	90 91 c0 00 	lds	r25, 0x00C0
     1ac:	95 ff       	sbrs	r25, 5
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <uart_putchar>
    UDR0 = c;
     1b0:	80 93 c6 00 	sts	0x00C6, r24
    return 0;
}
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	08 95       	ret

000001ba <adc_init>:
#define DT 2
#define SW 6

void adc_init(void){

    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	87 60       	ori	r24, 0x07	; 7
     1c2:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS0); //Voltage reference from Avcc (5v)
     1c4:	ac e7       	ldi	r26, 0x7C	; 124
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	8c 91       	ld	r24, X
     1ca:	80 64       	ori	r24, 0x40	; 64
     1cc:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADEN); //Turn on ADC
     1ce:	80 81       	ld	r24, Z
     1d0:	80 68       	ori	r24, 0x80	; 128
     1d2:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADSC); //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     1d4:	80 81       	ld	r24, Z
     1d6:	80 64       	ori	r24, 0x40	; 64
     1d8:	80 83       	st	Z, r24
     1da:	08 95       	ret

000001dc <adc_read>:
}

uint16_t adc_read(void){
    ADMUX &= 0xF0;                    //Clear the older channel that was read
     1dc:	80 91 7c 00 	lds	r24, 0x007C
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= 0;                //Defines the new ADC channel to be read
     1e6:	80 91 7c 00 	lds	r24, 0x007C
     1ea:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA |= (1<<ADSC);                //Starts a new conversion
     1ee:	80 91 7a 00 	lds	r24, 0x007A
     1f2:	80 64       	ori	r24, 0x40	; 64
     1f4:	80 93 7a 00 	sts	0x007A, r24
    while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
     1f8:	80 91 7a 00 	lds	r24, 0x007A
     1fc:	86 fd       	sbrc	r24, 6
     1fe:	fc cf       	rjmp	.-8      	; 0x1f8 <adc_read+0x1c>
    return ADCW;                    //Returns the ADC value of the chosen channel
     200:	20 91 78 00 	lds	r18, 0x0078
     204:	30 91 79 00 	lds	r19, 0x0079
}
     208:	c9 01       	movw	r24, r18
     20a:	08 95       	ret

0000020c <uart_init>:

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
     20c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     210:	87 e6       	ldi	r24, 0x67	; 103
     212:	80 93 c4 00 	sts	0x00C4, r24

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
     216:	e0 ec       	ldi	r30, 0xC0	; 192
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8d 7f       	andi	r24, 0xFD	; 253
     21e:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
     220:	86 e0       	ldi	r24, 0x06	; 6
     222:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
     226:	88 e1       	ldi	r24, 0x18	; 24
     228:	80 93 c1 00 	sts	0x00C1, r24
     22c:	08 95       	ret

0000022e <uart_getchar>:
    UDR0 = c;
    return 0;
}

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
     22e:	80 91 c0 00 	lds	r24, 0x00C0
     232:	87 ff       	sbrs	r24, 7
     234:	fc cf       	rjmp	.-8      	; 0x22e <uart_getchar>
    return UDR0;
     236:	80 91 c6 00 	lds	r24, 0x00C6
}
     23a:	08 95       	ret

0000023c <timer1_init>:

#define TIMER_FREQ_HZ   1

void timer1_init(void){
    // Init Pin PB0 Output, set to 0
    DDRB |= (1<<DDB2);
     23c:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1<<PORTB2);
     23e:	2a 98       	cbi	0x05, 2	; 5

    // initialize timer1
    cli();
     240:	f8 94       	cli
    TCCR1A = 0;
     242:	a0 e8       	ldi	r26, 0x80	; 128
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	1c 92       	st	X, r1
    TCCR1B = 0;
     248:	e1 e8       	ldi	r30, 0x81	; 129
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	10 82       	st	Z, r1
    TCNT1  = 0;
     24e:	10 92 85 00 	sts	0x0085, r1
     252:	10 92 84 00 	sts	0x0084, r1

    // Set FastPWM with OCR1A on TOP, CLEAR on Compare + Set on BOTTOM
    // Prescaler 256
    // Here 64 !
    TCCR1A = _BV(COM1A1)
     256:	83 ea       	ldi	r24, 0xA3	; 163
     258:	8c 93       	st	X, r24
        | _BV(COM1B1)
        | _BV(WGM10)
        | _BV(WGM11);

    TCCR1B = _BV(WGM12)
     25a:	8b e1       	ldi	r24, 0x1B	; 27
     25c:	80 83       	st	Z, r24
        | _BV(WGM13)
        | _BV(CS11)
        | _BV(CS10);

    OCR1B = 0;//156;//10*3125/100;
     25e:	10 92 8b 00 	sts	0x008B, r1
     262:	10 92 8a 00 	sts	0x008A, r1
    OCR1A = 3125;
     266:	85 e3       	ldi	r24, 0x35	; 53
     268:	9c e0       	ldi	r25, 0x0C	; 12
     26a:	90 93 89 00 	sts	0x0089, r25
     26e:	80 93 88 00 	sts	0x0088, r24
    sei();             // enable all interrupts
     272:	78 94       	sei
     274:	08 95       	ret

00000276 <timer0_init>:
}

long int sec;
void timer0_init(void){
    cli();
     276:	f8 94       	cli

    TCCR0A = 0;
     278:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
     27a:	15 bc       	out	0x25, r1	; 37
    TCNT0  = 0;
     27c:	16 bc       	out	0x26, r1	; 38

    // Presc 1024
    TCCR0B |= _BV(CS02) | _BV(CS00);
     27e:	85 b5       	in	r24, 0x25	; 37
     280:	85 60       	ori	r24, 0x05	; 5
     282:	85 bd       	out	0x25, r24	; 37

    TIMSK0 |= _BV(TOIE0);
     284:	ee e6       	ldi	r30, 0x6E	; 110
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	81 60       	ori	r24, 0x01	; 1
     28c:	80 83       	st	Z, r24
    sei();
     28e:	78 94       	sei
     290:	08 95       	ret

00000292 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
    sec+=1;//(1024.f/16E6);
     2a4:	80 91 ad 01 	lds	r24, 0x01AD
     2a8:	90 91 ae 01 	lds	r25, 0x01AE
     2ac:	a0 91 af 01 	lds	r26, 0x01AF
     2b0:	b0 91 b0 01 	lds	r27, 0x01B0
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
     2ba:	80 93 ad 01 	sts	0x01AD, r24
     2be:	90 93 ae 01 	sts	0x01AE, r25
     2c2:	a0 93 af 01 	sts	0x01AF, r26
     2c6:	b0 93 b0 01 	sts	0x01B0, r27
} 
     2ca:	bf 91       	pop	r27
     2cc:	af 91       	pop	r26
     2ce:	9f 91       	pop	r25
     2d0:	8f 91       	pop	r24
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <seconds>:

float seconds(void){
    float result;
    cli();
     2dc:	f8 94       	cli
    result = sec*(255.f*1024.f/16E6);
     2de:	60 91 ad 01 	lds	r22, 0x01AD
     2e2:	70 91 ae 01 	lds	r23, 0x01AE
     2e6:	80 91 af 01 	lds	r24, 0x01AF
     2ea:	90 91 b0 01 	lds	r25, 0x01B0
     2ee:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatsisf>
     2f2:	25 e8       	ldi	r18, 0x85	; 133
     2f4:	31 eb       	ldi	r19, 0xB1	; 177
     2f6:	45 e8       	ldi	r20, 0x85	; 133
     2f8:	5c e3       	ldi	r21, 0x3C	; 60
     2fa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
    sei();
     2fe:	78 94       	sei
    return result;
}
     300:	08 95       	ret

00000302 <millis>:

float millis(void){// OVERFLOW in 3,4E38 ms
    float result;
    cli();
     302:	f8 94       	cli
    result = sec*(255.f*1024.f/(16E6*10E-3));
     304:	60 91 ad 01 	lds	r22, 0x01AD
     308:	70 91 ae 01 	lds	r23, 0x01AE
     30c:	80 91 af 01 	lds	r24, 0x01AF
     310:	90 91 b0 01 	lds	r25, 0x01B0
     314:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatsisf>
     318:	20 e6       	ldi	r18, 0x60	; 96
     31a:	35 ee       	ldi	r19, 0xE5	; 229
     31c:	40 ed       	ldi	r20, 0xD0	; 208
     31e:	5f e3       	ldi	r21, 0x3F	; 63
     320:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
    sei();
     324:	78 94       	sei
    return result;
}
     326:	08 95       	ret

00000328 <set_temp>:
float old_error,dt,new_error,derivative,integral,KP,KI,KD,command;
long new_time,old_time;

void set_temp(float temp){
    uint16_t duty_cycle;
    int duty_cycle_int = temp * (TEMP_MAX / 100.0f);
     328:	2a e9       	ldi	r18, 0x9A	; 154
     32a:	39 e9       	ldi	r19, 0x99	; 153
     32c:	49 e9       	ldi	r20, 0x99	; 153
     32e:	50 e4       	ldi	r21, 0x40	; 64
     330:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     334:	0e 94 93 09 	call	0x1326	; 0x1326 <__fixsfsi>
    // FIXME : Dutycycle not in pourcent but model was made as this
    //int duty_cycle_int = (int)(temp * (100/TEMP_MAX));
    duty_cycle = (uint16_t)(duty_cycle_int) * 31;
     338:	2f e1       	ldi	r18, 0x1F	; 31
     33a:	26 9f       	mul	r18, r22
     33c:	c0 01       	movw	r24, r0
     33e:	27 9f       	mul	r18, r23
     340:	90 0d       	add	r25, r0
     342:	11 24       	eor	r1, r1
    if(duty_cycle>=2500) duty_cycle = 2500;
     344:	84 3c       	cpi	r24, 0xC4	; 196
     346:	29 e0       	ldi	r18, 0x09	; 9
     348:	92 07       	cpc	r25, r18
     34a:	10 f0       	brcs	.+4      	; 0x350 <set_temp+0x28>
     34c:	84 ec       	ldi	r24, 0xC4	; 196
     34e:	99 e0       	ldi	r25, 0x09	; 9
    if(duty_cycle<0)    duty_cycle = 0;

    cli();
     350:	f8 94       	cli
    OCR1B = duty_cycle;
     352:	90 93 8b 00 	sts	0x008B, r25
     356:	80 93 8a 00 	sts	0x008A, r24
    sei();
     35a:	78 94       	sei
     35c:	08 95       	ret

0000035e <get_temp>:
}

float get_temp(void){
     35e:	8f 92       	push	r8
     360:	9f 92       	push	r9
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
    int i;
    static float lpf_temp;
    float avg_temp = 0.0;
#define AVG_SAMPLE 300
    if(adc_read()*(5.0f/1024.0f) > 4){
     372:	0e 94 ee 00 	call	0x1dc	; 0x1dc <adc_read>
     376:	bc 01       	movw	r22, r24
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 c4 09 	call	0x1388	; 0x1388 <__floatunsisf>
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 ea       	ldi	r20, 0xA0	; 160
     386:	5b e3       	ldi	r21, 0x3B	; 59
     388:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e8       	ldi	r20, 0x80	; 128
     392:	50 e4       	ldi	r21, 0x40	; 64
     394:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__gesf2>
     398:	18 16       	cp	r1, r24
     39a:	0c f4       	brge	.+2      	; 0x39e <get_temp+0x40>
     39c:	5a c0       	rjmp	.+180    	; 0x452 <get_temp+0xf4>
     39e:	cc e2       	ldi	r28, 0x2C	; 44
     3a0:	d1 e0       	ldi	r29, 0x01	; 1
     3a2:	e1 2c       	mov	r14, r1
     3a4:	f1 2c       	mov	r15, r1
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	10 e0       	ldi	r17, 0x00	; 0
        return -1.0f;
    }
    for(i=0;i<AVG_SAMPLE;i++){
        avg_temp += 600*(5.0f/1024.0f)*adc_read() - 100; //0.5V => 200°C
     3aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <adc_read>
     3ae:	bc 01       	movw	r22, r24
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 c4 09 	call	0x1388	; 0x1388 <__floatunsisf>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e8       	ldi	r19, 0x80	; 128
     3bc:	4b e3       	ldi	r20, 0x3B	; 59
     3be:	50 e4       	ldi	r21, 0x40	; 64
     3c0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	48 ec       	ldi	r20, 0xC8	; 200
     3ca:	52 e4       	ldi	r21, 0x42	; 66
     3cc:	0e 94 c6 08 	call	0x118c	; 0x118c <__subsf3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	6e 2d       	mov	r22, r14
     3d6:	7f 2d       	mov	r23, r15
     3d8:	80 2f       	mov	r24, r16
     3da:	91 2f       	mov	r25, r17
     3dc:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3>
     3e0:	7b 01       	movw	r14, r22
     3e2:	8c 01       	movw	r16, r24
     3e4:	21 97       	sbiw	r28, 0x01	; 1
    float avg_temp = 0.0;
#define AVG_SAMPLE 300
    if(adc_read()*(5.0f/1024.0f) > 4){
        return -1.0f;
    }
    for(i=0;i<AVG_SAMPLE;i++){
     3e6:	09 f7       	brne	.-62     	; 0x3aa <get_temp+0x4c>
        avg_temp += 600*(5.0f/1024.0f)*adc_read() - 100; //0.5V => 200°C
    }
    avg_temp = avg_temp/AVG_SAMPLE;
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	46 e9       	ldi	r20, 0x96	; 150
     3ee:	53 e4       	ldi	r21, 0x43	; 67
     3f0:	7f 2d       	mov	r23, r15
     3f2:	91 2f       	mov	r25, r17
     3f4:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divsf3>
     3f8:	8b 01       	movw	r16, r22
     3fa:	d8 2f       	mov	r29, r24
     3fc:	c9 2f       	mov	r28, r25
#define alpha 0.99f
    lpf_temp = lpf_temp*alpha + (1.0-alpha)*avg_temp;
     3fe:	24 ea       	ldi	r18, 0xA4	; 164
     400:	30 e7       	ldi	r19, 0x70	; 112
     402:	4d e7       	ldi	r20, 0x7D	; 125
     404:	5f e3       	ldi	r21, 0x3F	; 63
     406:	60 91 85 01 	lds	r22, 0x0185
     40a:	70 91 86 01 	lds	r23, 0x0186
     40e:	80 91 87 01 	lds	r24, 0x0187
     412:	90 91 88 01 	lds	r25, 0x0188
     416:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     41a:	4b 01       	movw	r8, r22
     41c:	5c 01       	movw	r10, r24
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	37 ed       	ldi	r19, 0xD7	; 215
     422:	43 e2       	ldi	r20, 0x23	; 35
     424:	5c e3       	ldi	r21, 0x3C	; 60
     426:	fe 01       	movw	r30, r28
     428:	60 2f       	mov	r22, r16
     42a:	71 2f       	mov	r23, r17
     42c:	8f 2f       	mov	r24, r31
     42e:	9e 2f       	mov	r25, r30
     430:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     434:	9b 01       	movw	r18, r22
     436:	ac 01       	movw	r20, r24
     438:	c5 01       	movw	r24, r10
     43a:	b4 01       	movw	r22, r8
     43c:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3>
     440:	60 93 85 01 	sts	0x0185, r22
     444:	70 93 86 01 	sts	0x0186, r23
     448:	80 93 87 01 	sts	0x0187, r24
     44c:	90 93 88 01 	sts	0x0188, r25
    return ((float)avg_temp);
     450:	04 c0       	rjmp	.+8      	; 0x45a <get_temp+0xfc>
    int i;
    static float lpf_temp;
    float avg_temp = 0.0;
#define AVG_SAMPLE 300
    if(adc_read()*(5.0f/1024.0f) > 4){
        return -1.0f;
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	d0 e8       	ldi	r29, 0x80	; 128
     458:	cf eb       	ldi	r28, 0xBF	; 191
    }
    avg_temp = avg_temp/AVG_SAMPLE;
#define alpha 0.99f
    lpf_temp = lpf_temp*alpha + (1.0-alpha)*avg_temp;
    return ((float)avg_temp);
}
     45a:	9e 01       	movw	r18, r28
     45c:	60 2f       	mov	r22, r16
     45e:	71 2f       	mov	r23, r17
     460:	83 2f       	mov	r24, r19
     462:	9c 2f       	mov	r25, r28
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	bf 90       	pop	r11
     472:	af 90       	pop	r10
     474:	9f 90       	pop	r9
     476:	8f 90       	pop	r8
     478:	08 95       	ret

0000047a <encoder_init>:
void encoder_init(void){
    // DT   2
    // CK   3
    // PUSH 6

    DDRD &= ~(1<<DDD2);
     47a:	52 98       	cbi	0x0a, 2	; 10
    DDRD &= ~(1<<DDD3);
     47c:	53 98       	cbi	0x0a, 3	; 10
    DDRD &= ~(1<<DDD6);
     47e:	56 98       	cbi	0x0a, 6	; 10

    PORTD |= (1<<PORTD2);
     480:	5a 9a       	sbi	0x0b, 2	; 11
    PORTD |= (1<<PORTD3);
     482:	5b 9a       	sbi	0x0b, 3	; 11
    PORTD |= (1<<PORTD6);
     484:	5e 9a       	sbi	0x0b, 6	; 11
    counts = 0;
     486:	10 92 83 01 	sts	0x0183, r1
     48a:	10 92 82 01 	sts	0x0182, r1

    // Set Exti
    // Trigger INT1 falling edge
    EICRA |= (1<<ISC11);
     48e:	e9 e6       	ldi	r30, 0x69	; 105
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	88 60       	ori	r24, 0x08	; 8
     496:	80 83       	st	Z, r24
    // Enable INT1
    EIMSK |= (1<<INT1);
     498:	e9 9a       	sbi	0x1d, 1	; 29
     49a:	08 95       	ret

0000049c <enc_switch_state>:
}

// Return 1 if pressed
uint8_t enc_switch_state(void){
    return !(PIND&(1<<PIND6)); 
     49c:	89 b1       	in	r24, 0x09	; 9
     49e:	86 fb       	bst	r24, 6
     4a0:	88 27       	eor	r24, r24
     4a2:	80 f9       	bld	r24, 0
}
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	89 27       	eor	r24, r25
     4a8:	08 95       	ret

000004aa <__vector_2>:
ISR (INT1_vect){
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
    // A
    if(state == Update_Consigne){
     4b8:	80 91 84 01 	lds	r24, 0x0184
     4bc:	81 11       	cpse	r24, r1
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__vector_2+0x30>
     4c0:	80 91 82 01 	lds	r24, 0x0182
     4c4:	90 91 83 01 	lds	r25, 0x0183
        if(PIND&(1<<PIND2)){
     4c8:	4a 9b       	sbis	0x09, 2	; 9
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__vector_2+0x26>
            counts ++;
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <__vector_2+0x28>
        }
        else{
            counts --;
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	90 93 83 01 	sts	0x0183, r25
     4d6:	80 93 82 01 	sts	0x0182, r24

        }
    }
}
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <update_screen>:


uint8_t line1[]   = "Starting up ...";
//uint8_t line2[]   = "";
void update_screen(void){
    lcd_write_instruction_4d(lcd_Home);
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ee:	8f e3       	ldi	r24, 0x3F	; 63
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <update_screen+0xa>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <update_screen+0x10>
     4f8:	00 00       	nop
    _delay_us(80);                                  // 40 uS delay (min)
    lcd_write_string_4d(line1);
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0c 94 ba 02 	jmp	0x574	; 0x574 <lcd_write_string_4d>

00000502 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     502:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     504:	87 fd       	sbrc	r24, 7
     506:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     508:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     50a:	86 fd       	sbrc	r24, 6
     50c:	5c 9a       	sbi	0x0b, 4	; 11

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     50e:	28 98       	cbi	0x05, 0	; 5
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     510:	85 fd       	sbrc	r24, 5
     512:	28 9a       	sbi	0x05, 0	; 5

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     514:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     516:	84 fd       	sbrc	r24, 4
     518:	5f 9a       	sbi	0x0b, 7	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     51a:	2b 9a       	sbi	0x05, 3	; 5
     51c:	85 e0       	ldi	r24, 0x05	; 5
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <lcd_write_4+0x1c>
     522:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     524:	2b 98       	cbi	0x05, 3	; 5
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	8a 95       	dec	r24
     52a:	f1 f7       	brne	.-4      	; 0x528 <lcd_write_4+0x26>
     52c:	00 00       	nop
     52e:	08 95       	ret

00000530 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     530:	cf 93       	push	r28
     532:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     534:	2c 98       	cbi	0x05, 4	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     536:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     538:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     53c:	8c 2f       	mov	r24, r28
     53e:	82 95       	swap	r24
     540:	80 7f       	andi	r24, 0xF0	; 240
}
     542:	cf 91       	pop	r28
void lcd_write_instruction_4d(uint8_t theInstruction)
{
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     544:	0c 94 81 02 	jmp	0x502	; 0x502 <lcd_write_4>

00000548 <new_line>:
void lcd_write_string_4d(uint8_t *);
void lcd_init_4d(void);

/******************************* Main Program Code *************************/
void new_line(uint8_t line){
    lcd_write_instruction_4d(lcd_SetCursor | (line==2)?lcd_LineTwo:lcd_LineOne);
     548:	80 e4       	ldi	r24, 0x40	; 64
     54a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
     54e:	8f e3       	ldi	r24, 0x3F	; 63
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <new_line+0xa>
     556:	00 c0       	rjmp	.+0      	; 0x558 <new_line+0x10>
     558:	00 00       	nop
     55a:	08 95       	ret

0000055c <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     55c:	cf 93       	push	r28
     55e:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     560:	2c 9a       	sbi	0x05, 4	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     562:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     564:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     568:	8c 2f       	mov	r24, r28
     56a:	82 95       	swap	r24
     56c:	80 7f       	andi	r24, 0xF0	; 240
}
     56e:	cf 91       	pop	r28
void lcd_write_character_4d(uint8_t theData)
{
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    lcd_write_4(theData);                           // write the upper 4-bits of the data
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     570:	0c 94 81 02 	jmp	0x502	; 0x502 <lcd_write_4>

00000574 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	00 d0       	rcall	.+0      	; 0x57e <lcd_write_string_4d+0xa>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     584:	1a 82       	std	Y+2, r1	; 0x02
     586:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     588:	13 c0       	rjmp	.+38     	; 0x5b0 <lcd_write_string_4d+0x3c>
    {
        lcd_write_character_4d(theString[i]);
     58a:	e9 81       	ldd	r30, Y+1	; 0x01
     58c:	fa 81       	ldd	r31, Y+2	; 0x02
     58e:	e0 0f       	add	r30, r16
     590:	f1 1f       	adc	r31, r17
     592:	80 81       	ld	r24, Z
     594:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_write_character_4d>
        i++;
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	3a 81       	ldd	r19, Y+2	; 0x02
     59c:	2f 5f       	subi	r18, 0xFF	; 255
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
     5a0:	3a 83       	std	Y+2, r19	; 0x02
     5a2:	29 83       	std	Y+1, r18	; 0x01
     5a4:	8f e3       	ldi	r24, 0x3F	; 63
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_write_string_4d+0x34>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <lcd_write_string_4d+0x3a>
     5ae:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     5b0:	e9 81       	ldd	r30, Y+1	; 0x01
     5b2:	fa 81       	ldd	r31, Y+2	; 0x02
     5b4:	e0 0f       	add	r30, r16
     5b6:	f1 1f       	adc	r31, r17
     5b8:	80 81       	ld	r24, Z
     5ba:	81 11       	cpse	r24, r1
     5bc:	e6 cf       	rjmp	.-52     	; 0x58a <lcd_write_string_4d+0x16>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <lcd_init_4d>:
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_init_4d(void)
{
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     5cc:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
     5ce:	54 9a       	sbi	0x0a, 4	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
     5d0:	20 9a       	sbi	0x04, 0	; 4
    lcd_D4_ddr |= (1<<lcd_D4_bit);
     5d2:	57 9a       	sbi	0x0a, 7	; 10

//// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     5d4:	23 9a       	sbi	0x04, 3	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     5d6:	24 9a       	sbi	0x04, 4	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	81 ee       	ldi	r24, 0xE1	; 225
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <lcd_init_4d+0x12>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <lcd_init_4d+0x1c>
     5e8:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted 
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the 
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     5ea:	2c 98       	cbi	0x05, 4	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     5ec:	2b 98       	cbi	0x05, 3	; 5

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     5ee:	80 e3       	ldi	r24, 0x30	; 48
     5f0:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
     5f4:	8f e3       	ldi	r24, 0x3F	; 63
     5f6:	9c e9       	ldi	r25, 0x9C	; 156
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <lcd_init_4d+0x2c>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <lcd_init_4d+0x32>
     5fe:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     600:	80 e3       	ldi	r24, 0x30	; 48
     602:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     606:	8f e1       	ldi	r24, 0x1F	; 31
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_init_4d+0x3e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <lcd_init_4d+0x44>
     610:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
     618:	8f e1       	ldi	r24, 0x1F	; 31
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <lcd_init_4d+0x50>
     620:	00 c0       	rjmp	.+0      	; 0x622 <lcd_init_4d+0x56>
     622:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     624:	88 e2       	ldi	r24, 0x28	; 40
     626:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_4>
     62a:	8f e3       	ldi	r24, 0x3F	; 63
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <lcd_init_4d+0x62>
     632:	00 c0       	rjmp	.+0      	; 0x634 <lcd_init_4d+0x68>
     634:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     636:	88 e2       	ldi	r24, 0x28	; 40
     638:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
     63c:	8f e3       	ldi	r24, 0x3F	; 63
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <lcd_init_4d+0x74>
     644:	00 c0       	rjmp	.+0      	; 0x646 <lcd_init_4d+0x7a>
     646:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
     64e:	8f e3       	ldi	r24, 0x3F	; 63
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <lcd_init_4d+0x86>
     656:	00 c0       	rjmp	.+0      	; 0x658 <lcd_init_4d+0x8c>
     658:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     660:	8f e7       	ldi	r24, 0x7F	; 127
     662:	9e e3       	ldi	r25, 0x3E	; 62
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <lcd_init_4d+0x98>
     668:	00 c0       	rjmp	.+0      	; 0x66a <lcd_init_4d+0x9e>
     66a:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	8f e3       	ldi	r24, 0x3F	; 63
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <lcd_init_4d+0xaa>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <lcd_init_4d+0xb0>
     67c:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     67e:	8c e0       	ldi	r24, 0x0C	; 12
     680:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
     684:	8f e3       	ldi	r24, 0x3F	; 63
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <lcd_init_4d+0xbc>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <lcd_init_4d+0xc2>
     68e:	00 00       	nop
     690:	08 95       	ret

00000692 <hidden_main>:
}
int hidden_main(void)
{

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
     692:	0e 94 e6 02 	call	0x5cc	; 0x5cc <lcd_init_4d>

// display the first line of information
    lcd_write_string_4d(program_author);
     696:	8e e3       	ldi	r24, 0x3E	; 62
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_write_string_4d>

// set cursor to start of second line
    lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     69e:	80 ec       	ldi	r24, 0xC0	; 192
     6a0:	0e 94 98 02 	call	0x530	; 0x530 <lcd_write_instruction_4d>
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <hidden_main+0x16>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <hidden_main+0x1c>
     6ae:	00 00       	nop
    _delay_us(80);                                  // 40 uS delay (min)

// display the second line of information
    lcd_write_string_4d(program_version);
     6b0:	8d e2       	ldi	r24, 0x2D	; 45
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_write_string_4d>
     6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <hidden_main+0x26>

000006ba <main>:
long last_display_update_ms = 0;

long time;

int main(void)
{
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <main+0x6>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <main+0x8>
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
    //long newPosition;
    //long oldPosition = -999;


    uart_init();
     6c8:	0e 94 06 01 	call	0x20c	; 0x20c <uart_init>

    sei();
     6cc:	78 94       	sei

    stdout = &uart_output;
     6ce:	82 e1       	ldi	r24, 0x12	; 18
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	90 93 c0 01 	sts	0x01C0, r25
     6d6:	80 93 bf 01 	sts	0x01BF, r24

    //timer1_init();
    timer0_init();
     6da:	0e 94 3b 01 	call	0x276	; 0x276 <timer0_init>
    lcd_init_4d();
     6de:	0e 94 e6 02 	call	0x5cc	; 0x5cc <lcd_init_4d>

    lcd_write_string_4d(line1);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_write_string_4d>
    printf("Debut\r\n");
     6ea:	8c e4       	ldi	r24, 0x4C	; 76
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 45 0c 	call	0x188a	; 0x188a <puts>



    encoder_init();
     6f2:	0e 94 3d 02 	call	0x47a	; 0x47a <encoder_init>
    adc_init();
     6f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <adc_init>

                /*KP = 0.09; Réglage OK mais pas hyper stable
                  KD = -0.13;
                  KI = 0.0026;*/

                KP = 0.17;
     6fa:	4b e7       	ldi	r20, 0x7B	; 123
     6fc:	24 2e       	mov	r2, r20
     6fe:	44 e1       	ldi	r20, 0x14	; 20
     700:	34 2e       	mov	r3, r20
     702:	4e e2       	ldi	r20, 0x2E	; 46
     704:	44 2e       	mov	r4, r20
     706:	4e e3       	ldi	r20, 0x3E	; 62
     708:	54 2e       	mov	r5, r20

        switch(state){
            case Update_Consigne:
                set_temp(0.f);

                snprintf((char*)line1,16,"Temp %i           ",counts>>2);
     70a:	10 e1       	ldi	r17, 0x10	; 16

    float tempp;

    for (;;) {

        switch(state){
     70c:	80 91 84 01 	lds	r24, 0x0184
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f4       	brne	.+2      	; 0x716 <main+0x5c>
     714:	77 c0       	rjmp	.+238    	; 0x804 <main+0x14a>
     716:	18 f0       	brcs	.+6      	; 0x71e <main+0x64>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	d1 f7       	brne	.-12     	; 0x710 <main+0x56>
     71c:	b0 c1       	rjmp	.+864    	; 0xa7e <__stack+0x17f>
            case Update_Consigne:
                set_temp(0.f);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	cb 01       	movw	r24, r22
     724:	0e 94 94 01 	call	0x328	; 0x328 <set_temp>

                snprintf((char*)line1,16,"Temp %i           ",counts>>2);
     728:	80 91 82 01 	lds	r24, 0x0182
     72c:	90 91 83 01 	lds	r25, 0x0183
     730:	95 95       	asr	r25
     732:	87 95       	ror	r24
     734:	95 95       	asr	r25
     736:	87 95       	ror	r24
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	23 e5       	ldi	r18, 0x53	; 83
     73e:	31 e0       	ldi	r19, 0x01	; 1
     740:	3f 93       	push	r19
     742:	2f 93       	push	r18
     744:	1f 92       	push	r1
     746:	1f 93       	push	r17
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <snprintf>
                if(enc_switch_state()){
     754:	0e 94 4e 02 	call	0x49c	; 0x49c <enc_switch_state>
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	88 23       	and	r24, r24
     764:	09 f4       	brne	.+2      	; 0x768 <main+0xae>
     766:	4a c0       	rjmp	.+148    	; 0x7fc <main+0x142>
                    while(enc_switch_state());
     768:	0e 94 4e 02 	call	0x49c	; 0x49c <enc_switch_state>
     76c:	81 11       	cpse	r24, r1
     76e:	fc cf       	rjmp	.-8      	; 0x768 <main+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     770:	ff ef       	ldi	r31, 0xFF	; 255
     772:	29 e6       	ldi	r18, 0x69	; 105
     774:	38 e1       	ldi	r19, 0x18	; 24
     776:	f1 50       	subi	r31, 0x01	; 1
     778:	20 40       	sbci	r18, 0x00	; 0
     77a:	30 40       	sbci	r19, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <main+0xbc>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0xc6>
     780:	00 00       	nop
     782:	2f c0       	rjmp	.+94     	; 0x7e2 <main+0x128>
                    _delay_ms(500);
                    while(!enc_switch_state()){
                        update_screen();
     784:	0e 94 74 02 	call	0x4e8	; 0x4e8 <update_screen>
                        printf("Update Consigne\r\n");
     788:	86 e6       	ldi	r24, 0x66	; 102
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 45 0c 	call	0x188a	; 0x188a <puts>
                        Consigne = counts >> 2;
     790:	80 91 82 01 	lds	r24, 0x0182
     794:	90 91 83 01 	lds	r25, 0x0183
     798:	95 95       	asr	r25
     79a:	87 95       	ror	r24
     79c:	95 95       	asr	r25
     79e:	87 95       	ror	r24
     7a0:	90 93 01 01 	sts	0x0101, r25
     7a4:	80 93 00 01 	sts	0x0100, r24
                        snprintf((char*)line1,16,"Temp %i           ",Consigne);
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	43 e5       	ldi	r20, 0x53	; 83
     7ae:	51 e0       	ldi	r21, 0x01	; 1
     7b0:	5f 93       	push	r21
     7b2:	4f 93       	push	r20
     7b4:	1f 92       	push	r1
     7b6:	1f 93       	push	r17
     7b8:	a2 e0       	ldi	r26, 0x02	; 2
     7ba:	b1 e0       	ldi	r27, 0x01	; 1
     7bc:	bf 93       	push	r27
     7be:	af 93       	push	r26
     7c0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <snprintf>
                        printf("[%s]\n",line1);
     7c4:	22 e0       	ldi	r18, 0x02	; 2
     7c6:	31 e0       	ldi	r19, 0x01	; 1
     7c8:	3f 93       	push	r19
     7ca:	2f 93       	push	r18
     7cc:	87 e7       	ldi	r24, 0x77	; 119
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <printf>
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61

                snprintf((char*)line1,16,"Temp %i           ",counts>>2);
                if(enc_switch_state()){
                    while(enc_switch_state());
                    _delay_ms(500);
                    while(!enc_switch_state()){
     7e2:	0e 94 4e 02 	call	0x49c	; 0x49c <enc_switch_state>
     7e6:	88 23       	and	r24, r24
     7e8:	69 f2       	breq	.-102    	; 0x784 <main+0xca>
     7ea:	ff ef       	ldi	r31, 0xFF	; 255
     7ec:	29 e6       	ldi	r18, 0x69	; 105
     7ee:	38 e1       	ldi	r19, 0x18	; 24
     7f0:	f1 50       	subi	r31, 0x01	; 1
     7f2:	20 40       	sbci	r18, 0x00	; 0
     7f4:	30 40       	sbci	r19, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0x136>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0x140>
     7fa:	00 00       	nop
                        snprintf((char*)line1,16,"Temp %i           ",Consigne);
                        printf("[%s]\n",line1);
                    }
                    _delay_ms(500);
                }
                state = Process_Commmand;
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	40 93 84 01 	sts	0x0184, r20
                break;
     802:	84 cf       	rjmp	.-248    	; 0x70c <main+0x52>
            case Process_Commmand:
                new_time = millis();
     804:	0e 94 81 01 	call	0x302	; 0x302 <millis>
     808:	0e 94 93 09 	call	0x1326	; 0x1326 <__fixsfsi>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
     810:	60 93 a1 01 	sts	0x01A1, r22
     814:	70 93 a2 01 	sts	0x01A2, r23
     818:	80 93 a3 01 	sts	0x01A3, r24
     81c:	90 93 a4 01 	sts	0x01A4, r25
                dt       = new_time - old_time; 
     820:	80 91 8d 01 	lds	r24, 0x018D
     824:	90 91 8e 01 	lds	r25, 0x018E
     828:	a0 91 8f 01 	lds	r26, 0x018F
     82c:	b0 91 90 01 	lds	r27, 0x0190
     830:	a7 01       	movw	r20, r14
     832:	96 01       	movw	r18, r12
     834:	28 1b       	sub	r18, r24
     836:	39 0b       	sbc	r19, r25
     838:	4a 0b       	sbc	r20, r26
     83a:	5b 0b       	sbc	r21, r27
     83c:	ca 01       	movw	r24, r20
     83e:	b9 01       	movw	r22, r18
     840:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatsisf>
     844:	60 93 b1 01 	sts	0x01B1, r22
     848:	70 93 b2 01 	sts	0x01B2, r23
     84c:	80 93 b3 01 	sts	0x01B3, r24
     850:	90 93 b4 01 	sts	0x01B4, r25
                old_time = new_time;
     854:	c0 92 8d 01 	sts	0x018D, r12
     858:	d0 92 8e 01 	sts	0x018E, r13
     85c:	e0 92 8f 01 	sts	0x018F, r14
     860:	f0 92 90 01 	sts	0x0190, r15
                // Update display content
                tempp = get_temp();
     864:	0e 94 af 01 	call	0x35e	; 0x35e <get_temp>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
                if(tempp< 0.0){
                    //lcd.print("No Iron");
                }
                last_display_update_ms = new_time;
     86c:	80 91 a1 01 	lds	r24, 0x01A1
     870:	90 91 a2 01 	lds	r25, 0x01A2
     874:	a0 91 a3 01 	lds	r26, 0x01A3
     878:	b0 91 a4 01 	lds	r27, 0x01A4
     87c:	80 93 7e 01 	sts	0x017E, r24
     880:	90 93 7f 01 	sts	0x017F, r25
     884:	a0 93 80 01 	sts	0x0180, r26
     888:	b0 93 81 01 	sts	0x0181, r27

                new_error = Consigne - tempp; // Process new error
     88c:	60 91 00 01 	lds	r22, 0x0100
     890:	70 91 01 01 	lds	r23, 0x0101
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	2a 83       	std	Y+2, r18	; 0x02
     89a:	3b 83       	std	Y+3, r19	; 0x03
     89c:	4c 83       	std	Y+4, r20	; 0x04
     89e:	5d 83       	std	Y+5, r21	; 0x05
     8a0:	0e 94 c4 09 	call	0x1388	; 0x1388 <__floatunsisf>
     8a4:	2a 81       	ldd	r18, Y+2	; 0x02
     8a6:	3b 81       	ldd	r19, Y+3	; 0x03
     8a8:	4c 81       	ldd	r20, Y+4	; 0x04
     8aa:	5d 81       	ldd	r21, Y+5	; 0x05
     8ac:	0e 94 c6 08 	call	0x118c	; 0x118c <__subsf3>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
     8b4:	86 2f       	mov	r24, r22
     8b6:	9d 2d       	mov	r25, r13
     8b8:	ae 2d       	mov	r26, r14
     8ba:	bf 2d       	mov	r27, r15
     8bc:	80 93 99 01 	sts	0x0199, r24
     8c0:	90 93 9a 01 	sts	0x019A, r25
     8c4:	a0 93 9b 01 	sts	0x019B, r26
     8c8:	b0 93 9c 01 	sts	0x019C, r27
                derivative = (new_error-old_error)/(dt/1000);
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4a e7       	ldi	r20, 0x7A	; 122
     8d2:	54 e4       	ldi	r21, 0x44	; 68
     8d4:	60 91 b1 01 	lds	r22, 0x01B1
     8d8:	70 91 b2 01 	lds	r23, 0x01B2
     8dc:	80 91 b3 01 	lds	r24, 0x01B3
     8e0:	90 91 b4 01 	lds	r25, 0x01B4
     8e4:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divsf3>
     8e8:	96 2e       	mov	r9, r22
     8ea:	a7 2e       	mov	r10, r23
     8ec:	b8 2e       	mov	r11, r24
     8ee:	09 2f       	mov	r16, r25
     8f0:	20 91 a5 01 	lds	r18, 0x01A5
     8f4:	30 91 a6 01 	lds	r19, 0x01A6
     8f8:	40 91 a7 01 	lds	r20, 0x01A7
     8fc:	50 91 a8 01 	lds	r21, 0x01A8
     900:	6c 2d       	mov	r22, r12
     902:	7d 2d       	mov	r23, r13
     904:	8e 2d       	mov	r24, r14
     906:	9f 2d       	mov	r25, r15
     908:	0e 94 c6 08 	call	0x118c	; 0x118c <__subsf3>
     90c:	29 2d       	mov	r18, r9
     90e:	3a 2d       	mov	r19, r10
     910:	4b 2d       	mov	r20, r11
     912:	50 2f       	mov	r21, r16
     914:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divsf3>
     918:	69 83       	std	Y+1, r22	; 0x01
     91a:	67 2e       	mov	r6, r23
     91c:	78 2e       	mov	r7, r24
     91e:	89 2e       	mov	r8, r25
     920:	86 2f       	mov	r24, r22
     922:	96 2d       	mov	r25, r6
     924:	a7 2d       	mov	r26, r7
     926:	b8 2d       	mov	r27, r8
     928:	80 93 91 01 	sts	0x0191, r24
     92c:	90 93 92 01 	sts	0x0192, r25
     930:	a0 93 93 01 	sts	0x0193, r26
     934:	b0 93 94 01 	sts	0x0194, r27
                integral += new_error*(dt/1000);
     938:	29 2d       	mov	r18, r9
     93a:	3a 2d       	mov	r19, r10
     93c:	4b 2d       	mov	r20, r11
     93e:	50 2f       	mov	r21, r16
     940:	6c 2d       	mov	r22, r12
     942:	7d 2d       	mov	r23, r13
     944:	8e 2d       	mov	r24, r14
     946:	9f 2d       	mov	r25, r15
     948:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     94c:	20 91 b9 01 	lds	r18, 0x01B9
     950:	30 91 ba 01 	lds	r19, 0x01BA
     954:	40 91 bb 01 	lds	r20, 0x01BB
     958:	50 91 bc 01 	lds	r21, 0x01BC
     95c:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3>
     960:	96 2e       	mov	r9, r22
     962:	a7 2e       	mov	r10, r23
     964:	b8 2e       	mov	r11, r24
     966:	09 2f       	mov	r16, r25
     968:	86 2f       	mov	r24, r22
     96a:	9a 2d       	mov	r25, r10
     96c:	ab 2d       	mov	r26, r11
     96e:	b0 2f       	mov	r27, r16
     970:	80 93 b9 01 	sts	0x01B9, r24
     974:	90 93 ba 01 	sts	0x01BA, r25
     978:	a0 93 bb 01 	sts	0x01BB, r26
     97c:	b0 93 bc 01 	sts	0x01BC, r27

                old_error = new_error;
     980:	8c 2d       	mov	r24, r12
     982:	9d 2d       	mov	r25, r13
     984:	ae 2d       	mov	r26, r14
     986:	bf 2d       	mov	r27, r15
     988:	80 93 a5 01 	sts	0x01A5, r24
     98c:	90 93 a6 01 	sts	0x01A6, r25
     990:	a0 93 a7 01 	sts	0x01A7, r26
     994:	b0 93 a8 01 	sts	0x01A8, r27

                /*KP = 0.09; Réglage OK mais pas hyper stable
                  KD = -0.13;
                  KI = 0.0026;*/

                KP = 0.17;
     998:	20 92 95 01 	sts	0x0195, r2
     99c:	30 92 96 01 	sts	0x0196, r3
     9a0:	40 92 97 01 	sts	0x0197, r4
     9a4:	50 92 98 01 	sts	0x0198, r5
                KD = 0.0; // Rend instable le système mm avec petites valeurs
     9a8:	10 92 89 01 	sts	0x0189, r1
     9ac:	10 92 8a 01 	sts	0x018A, r1
     9b0:	10 92 8b 01 	sts	0x018B, r1
     9b4:	10 92 8c 01 	sts	0x018C, r1
                KI = 0.005;
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	97 ed       	ldi	r25, 0xD7	; 215
     9bc:	a3 ea       	ldi	r26, 0xA3	; 163
     9be:	bb e3       	ldi	r27, 0x3B	; 59
     9c0:	80 93 b5 01 	sts	0x01B5, r24
     9c4:	90 93 b6 01 	sts	0x01B6, r25
     9c8:	a0 93 b7 01 	sts	0x01B7, r26
     9cc:	b0 93 b8 01 	sts	0x01B8, r27
                // SIMU : en 5sec à 90%, 10sec à 100%, pas de dépassement
                command = KP*new_error + KD*derivative + KI*integral;
     9d0:	2b e7       	ldi	r18, 0x7B	; 123
     9d2:	34 e1       	ldi	r19, 0x14	; 20
     9d4:	4e e2       	ldi	r20, 0x2E	; 46
     9d6:	5e e3       	ldi	r21, 0x3E	; 62
     9d8:	6c 2d       	mov	r22, r12
     9da:	7d 2d       	mov	r23, r13
     9dc:	8e 2d       	mov	r24, r14
     9de:	9f 2d       	mov	r25, r15
     9e0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	a9 01       	movw	r20, r18
     9ee:	b9 81       	ldd	r27, Y+1	; 0x01
     9f0:	6b 2f       	mov	r22, r27
     9f2:	76 2d       	mov	r23, r6
     9f4:	87 2d       	mov	r24, r7
     9f6:	98 2d       	mov	r25, r8
     9f8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     9fc:	9b 01       	movw	r18, r22
     9fe:	ac 01       	movw	r20, r24
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3>
     a08:	6b 01       	movw	r12, r22
     a0a:	7c 01       	movw	r14, r24
     a0c:	2a e0       	ldi	r18, 0x0A	; 10
     a0e:	37 ed       	ldi	r19, 0xD7	; 215
     a10:	43 ea       	ldi	r20, 0xA3	; 163
     a12:	5b e3       	ldi	r21, 0x3B	; 59
     a14:	69 2d       	mov	r22, r9
     a16:	7a 2d       	mov	r23, r10
     a18:	8b 2d       	mov	r24, r11
     a1a:	90 2f       	mov	r25, r16
     a1c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3>
     a2c:	d6 2e       	mov	r13, r22
     a2e:	e7 2e       	mov	r14, r23
     a30:	f8 2e       	mov	r15, r24
     a32:	09 2f       	mov	r16, r25
     a34:	86 2f       	mov	r24, r22
     a36:	9e 2d       	mov	r25, r14
     a38:	af 2d       	mov	r26, r15
     a3a:	b0 2f       	mov	r27, r16
     a3c:	80 93 9d 01 	sts	0x019D, r24
     a40:	90 93 9e 01 	sts	0x019E, r25
     a44:	a0 93 9f 01 	sts	0x019F, r26
     a48:	b0 93 a0 01 	sts	0x01A0, r27
                if(command >= 0.0){
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	a9 01       	movw	r20, r18
     a52:	6d 2d       	mov	r22, r13
     a54:	7e 2d       	mov	r23, r14
     a56:	8f 2d       	mov	r24, r15
     a58:	90 2f       	mov	r25, r16
     a5a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__gesf2>
     a5e:	87 fd       	sbrc	r24, 7
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__stack+0x16d>
                    set_temp(command);
     a62:	6d 2d       	mov	r22, r13
     a64:	7e 2d       	mov	r23, r14
     a66:	8f 2d       	mov	r24, r15
     a68:	90 2f       	mov	r25, r16
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__stack+0x173>
                }
                else{
                    set_temp(0.0);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	cb 01       	movw	r24, r22
     a72:	0e 94 94 01 	call	0x328	; 0x328 <set_temp>
                }

                state = Send_Log;
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	90 93 84 01 	sts	0x0184, r25
                break;
     a7c:	47 ce       	rjmp	.-882    	; 0x70c <main+0x52>
            case Send_Log:
                state = Update_Consigne;
     a7e:	10 92 84 01 	sts	0x0184, r1
                break;
     a82:	44 ce       	rjmp	.-888    	; 0x70c <main+0x52>

00000a84 <vfprintf>:
     a84:	a3 e1       	ldi	r26, 0x13	; 19
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	e8 e4       	ldi	r30, 0x48	; 72
     a8a:	f5 e0       	ldi	r31, 0x05	; 5
     a8c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__prologue_saves__>
     a90:	7c 01       	movw	r14, r24
     a92:	5b 01       	movw	r10, r22
     a94:	8a 01       	movw	r16, r20
     a96:	fc 01       	movw	r30, r24
     a98:	17 82       	std	Z+7, r1	; 0x07
     a9a:	16 82       	std	Z+6, r1	; 0x06
     a9c:	83 81       	ldd	r24, Z+3	; 0x03
     a9e:	81 fd       	sbrc	r24, 1
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x24>
     aa2:	6d c3       	rjmp	.+1754   	; 0x117e <vfprintf+0x6fa>
     aa4:	86 01       	movw	r16, r12
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <vfprintf+0x2e>
     aa8:	88 24       	eor	r8, r8
     aaa:	83 94       	inc	r8
     aac:	91 2c       	mov	r9, r1
     aae:	8c 0e       	add	r8, r28
     ab0:	9d 1e       	adc	r9, r29
     ab2:	f7 01       	movw	r30, r14
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	f5 01       	movw	r30, r10
     ab8:	93 fd       	sbrc	r25, 3
     aba:	85 91       	lpm	r24, Z+
     abc:	93 ff       	sbrs	r25, 3
     abe:	81 91       	ld	r24, Z+
     ac0:	5f 01       	movw	r10, r30
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <vfprintf+0x44>
     ac6:	57 c3       	rjmp	.+1710   	; 0x1176 <vfprintf+0x6f2>
     ac8:	85 32       	cpi	r24, 0x25	; 37
     aca:	39 f4       	brne	.+14     	; 0xada <vfprintf+0x56>
     acc:	93 fd       	sbrc	r25, 3
     ace:	85 91       	lpm	r24, Z+
     ad0:	93 ff       	sbrs	r25, 3
     ad2:	81 91       	ld	r24, Z+
     ad4:	5f 01       	movw	r10, r30
     ad6:	85 32       	cpi	r24, 0x25	; 37
     ad8:	31 f4       	brne	.+12     	; 0xae6 <vfprintf+0x62>
     ada:	b7 01       	movw	r22, r14
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     ae2:	68 01       	movw	r12, r16
     ae4:	df cf       	rjmp	.-66     	; 0xaa4 <vfprintf+0x20>
     ae6:	41 2c       	mov	r4, r1
     ae8:	51 2c       	mov	r5, r1
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	20 32       	cpi	r18, 0x20	; 32
     aee:	a8 f4       	brcc	.+42     	; 0xb1a <vfprintf+0x96>
     af0:	8b 32       	cpi	r24, 0x2B	; 43
     af2:	61 f0       	breq	.+24     	; 0xb0c <vfprintf+0x88>
     af4:	28 f4       	brcc	.+10     	; 0xb00 <vfprintf+0x7c>
     af6:	80 32       	cpi	r24, 0x20	; 32
     af8:	51 f0       	breq	.+20     	; 0xb0e <vfprintf+0x8a>
     afa:	83 32       	cpi	r24, 0x23	; 35
     afc:	71 f4       	brne	.+28     	; 0xb1a <vfprintf+0x96>
     afe:	0b c0       	rjmp	.+22     	; 0xb16 <vfprintf+0x92>
     b00:	8d 32       	cpi	r24, 0x2D	; 45
     b02:	39 f0       	breq	.+14     	; 0xb12 <vfprintf+0x8e>
     b04:	80 33       	cpi	r24, 0x30	; 48
     b06:	49 f4       	brne	.+18     	; 0xb1a <vfprintf+0x96>
     b08:	21 60       	ori	r18, 0x01	; 1
     b0a:	28 c0       	rjmp	.+80     	; 0xb5c <vfprintf+0xd8>
     b0c:	22 60       	ori	r18, 0x02	; 2
     b0e:	24 60       	ori	r18, 0x04	; 4
     b10:	25 c0       	rjmp	.+74     	; 0xb5c <vfprintf+0xd8>
     b12:	28 60       	ori	r18, 0x08	; 8
     b14:	23 c0       	rjmp	.+70     	; 0xb5c <vfprintf+0xd8>
     b16:	20 61       	ori	r18, 0x10	; 16
     b18:	21 c0       	rjmp	.+66     	; 0xb5c <vfprintf+0xd8>
     b1a:	27 fd       	sbrc	r18, 7
     b1c:	27 c0       	rjmp	.+78     	; 0xb6c <vfprintf+0xe8>
     b1e:	38 2f       	mov	r19, r24
     b20:	30 53       	subi	r19, 0x30	; 48
     b22:	3a 30       	cpi	r19, 0x0A	; 10
     b24:	78 f4       	brcc	.+30     	; 0xb44 <vfprintf+0xc0>
     b26:	26 ff       	sbrs	r18, 6
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <vfprintf+0xb2>
     b2a:	fa e0       	ldi	r31, 0x0A	; 10
     b2c:	4f 9e       	mul	r4, r31
     b2e:	30 0d       	add	r19, r0
     b30:	11 24       	eor	r1, r1
     b32:	43 2e       	mov	r4, r19
     b34:	13 c0       	rjmp	.+38     	; 0xb5c <vfprintf+0xd8>
     b36:	8a e0       	ldi	r24, 0x0A	; 10
     b38:	58 9e       	mul	r5, r24
     b3a:	30 0d       	add	r19, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	53 2e       	mov	r5, r19
     b40:	20 62       	ori	r18, 0x20	; 32
     b42:	0c c0       	rjmp	.+24     	; 0xb5c <vfprintf+0xd8>
     b44:	8e 32       	cpi	r24, 0x2E	; 46
     b46:	21 f4       	brne	.+8      	; 0xb50 <vfprintf+0xcc>
     b48:	26 fd       	sbrc	r18, 6
     b4a:	15 c3       	rjmp	.+1578   	; 0x1176 <vfprintf+0x6f2>
     b4c:	20 64       	ori	r18, 0x40	; 64
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <vfprintf+0xd8>
     b50:	8c 36       	cpi	r24, 0x6C	; 108
     b52:	11 f4       	brne	.+4      	; 0xb58 <vfprintf+0xd4>
     b54:	20 68       	ori	r18, 0x80	; 128
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0xd8>
     b58:	88 36       	cpi	r24, 0x68	; 104
     b5a:	41 f4       	brne	.+16     	; 0xb6c <vfprintf+0xe8>
     b5c:	f5 01       	movw	r30, r10
     b5e:	93 fd       	sbrc	r25, 3
     b60:	85 91       	lpm	r24, Z+
     b62:	93 ff       	sbrs	r25, 3
     b64:	81 91       	ld	r24, Z+
     b66:	5f 01       	movw	r10, r30
     b68:	81 11       	cpse	r24, r1
     b6a:	c0 cf       	rjmp	.-128    	; 0xaec <vfprintf+0x68>
     b6c:	98 2f       	mov	r25, r24
     b6e:	95 54       	subi	r25, 0x45	; 69
     b70:	93 30       	cpi	r25, 0x03	; 3
     b72:	18 f4       	brcc	.+6      	; 0xb7a <vfprintf+0xf6>
     b74:	20 61       	ori	r18, 0x10	; 16
     b76:	80 5e       	subi	r24, 0xE0	; 224
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0x102>
     b7a:	98 2f       	mov	r25, r24
     b7c:	95 56       	subi	r25, 0x65	; 101
     b7e:	93 30       	cpi	r25, 0x03	; 3
     b80:	08 f0       	brcs	.+2      	; 0xb84 <vfprintf+0x100>
     b82:	a1 c1       	rjmp	.+834    	; 0xec6 <vfprintf+0x442>
     b84:	2f 7e       	andi	r18, 0xEF	; 239
     b86:	26 fd       	sbrc	r18, 6
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x10a>
     b8a:	56 e0       	ldi	r21, 0x06	; 6
     b8c:	45 2e       	mov	r4, r21
     b8e:	4f e3       	ldi	r20, 0x3F	; 63
     b90:	74 2e       	mov	r7, r20
     b92:	72 22       	and	r7, r18
     b94:	85 36       	cpi	r24, 0x65	; 101
     b96:	19 f4       	brne	.+6      	; 0xb9e <vfprintf+0x11a>
     b98:	f0 e4       	ldi	r31, 0x40	; 64
     b9a:	7f 2a       	or	r7, r31
     b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x128>
     b9e:	86 36       	cpi	r24, 0x66	; 102
     ba0:	19 f4       	brne	.+6      	; 0xba8 <vfprintf+0x124>
     ba2:	20 e8       	ldi	r18, 0x80	; 128
     ba4:	72 2a       	or	r7, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <vfprintf+0x128>
     ba8:	41 10       	cpse	r4, r1
     baa:	4a 94       	dec	r4
     bac:	77 fe       	sbrs	r7, 7
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <vfprintf+0x13a>
     bb0:	3b e3       	ldi	r19, 0x3B	; 59
     bb2:	34 15       	cp	r19, r4
     bb4:	48 f0       	brcs	.+18     	; 0xbc8 <vfprintf+0x144>
     bb6:	34 2c       	mov	r3, r4
     bb8:	33 94       	inc	r3
     bba:	27 e0       	ldi	r18, 0x07	; 7
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <vfprintf+0x154>
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	84 15       	cp	r24, r4
     bc2:	30 f0       	brcs	.+12     	; 0xbd0 <vfprintf+0x14c>
     bc4:	24 2d       	mov	r18, r4
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <vfprintf+0x152>
     bc8:	27 e0       	ldi	r18, 0x07	; 7
     bca:	3c e3       	ldi	r19, 0x3C	; 60
     bcc:	33 2e       	mov	r3, r19
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <vfprintf+0x154>
     bd0:	27 e0       	ldi	r18, 0x07	; 7
     bd2:	97 e0       	ldi	r25, 0x07	; 7
     bd4:	49 2e       	mov	r4, r25
     bd6:	31 2c       	mov	r3, r1
     bd8:	68 01       	movw	r12, r16
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	c9 0e       	add	r12, r25
     bde:	d1 1c       	adc	r13, r1
     be0:	f8 01       	movw	r30, r16
     be2:	60 81       	ld	r22, Z
     be4:	71 81       	ldd	r23, Z+1	; 0x01
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	03 2d       	mov	r16, r3
     bec:	a4 01       	movw	r20, r8
     bee:	0e 94 14 0b 	call	0x1628	; 0x1628 <__ftoa_engine>
     bf2:	8c 01       	movw	r16, r24
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	2c 87       	std	Y+12, r18	; 0x0c
     bf8:	20 ff       	sbrs	r18, 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x17c>
     bfc:	23 ff       	sbrs	r18, 3
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <vfprintf+0x18a>
     c00:	71 fc       	sbrc	r7, 1
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <vfprintf+0x190>
     c04:	72 fe       	sbrs	r7, 2
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <vfprintf+0x196>
     c08:	80 e2       	ldi	r24, 0x20	; 32
     c0a:	68 2e       	mov	r6, r24
     c0c:	07 c0       	rjmp	.+14     	; 0xc1c <vfprintf+0x198>
     c0e:	bd e2       	ldi	r27, 0x2D	; 45
     c10:	6b 2e       	mov	r6, r27
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <vfprintf+0x198>
     c14:	ab e2       	ldi	r26, 0x2B	; 43
     c16:	6a 2e       	mov	r6, r26
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <vfprintf+0x198>
     c1a:	61 2c       	mov	r6, r1
     c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1e:	8c 70       	andi	r24, 0x0C	; 12
     c20:	a1 f1       	breq	.+104    	; 0xc8a <vfprintf+0x206>
     c22:	66 20       	and	r6, r6
     c24:	11 f0       	breq	.+4      	; 0xc2a <vfprintf+0x1a6>
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <vfprintf+0x1a8>
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	85 15       	cp	r24, r5
     c2e:	10 f0       	brcs	.+4      	; 0xc34 <vfprintf+0x1b0>
     c30:	51 2c       	mov	r5, r1
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <vfprintf+0x1c6>
     c34:	58 1a       	sub	r5, r24
     c36:	73 fc       	sbrc	r7, 3
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <vfprintf+0x1c6>
     c3a:	b7 01       	movw	r22, r14
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     c44:	5a 94       	dec	r5
     c46:	c9 f7       	brne	.-14     	; 0xc3a <vfprintf+0x1b6>
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <vfprintf+0x1ac>
     c4a:	66 20       	and	r6, r6
     c4c:	29 f0       	breq	.+10     	; 0xc58 <vfprintf+0x1d4>
     c4e:	b7 01       	movw	r22, r14
     c50:	86 2d       	mov	r24, r6
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     c58:	3c 85       	ldd	r19, Y+12	; 0x0c
     c5a:	33 fd       	sbrc	r19, 3
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <vfprintf+0x1e0>
     c5e:	0c e6       	ldi	r16, 0x6C	; 108
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	0c c0       	rjmp	.+24     	; 0xc7c <vfprintf+0x1f8>
     c64:	08 e6       	ldi	r16, 0x68	; 104
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x1f8>
     c6a:	71 10       	cpse	r7, r1
     c6c:	80 52       	subi	r24, 0x20	; 32
     c6e:	b7 01       	movw	r22, r14
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x1fc>
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	78 22       	and	r7, r24
     c80:	f8 01       	movw	r30, r16
     c82:	84 91       	lpm	r24, Z+
     c84:	81 11       	cpse	r24, r1
     c86:	f1 cf       	rjmp	.-30     	; 0xc6a <vfprintf+0x1e6>
     c88:	73 c2       	rjmp	.+1254   	; 0x1170 <vfprintf+0x6ec>
     c8a:	77 fe       	sbrs	r7, 7
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <vfprintf+0x226>
     c8e:	30 0e       	add	r3, r16
     c90:	2c 85       	ldd	r18, Y+12	; 0x0c
     c92:	24 ff       	sbrs	r18, 4
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <vfprintf+0x21a>
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	81 33       	cpi	r24, 0x31	; 49
     c9a:	09 f4       	brne	.+2      	; 0xc9e <vfprintf+0x21a>
     c9c:	3a 94       	dec	r3
     c9e:	13 14       	cp	r1, r3
     ca0:	4c f5       	brge	.+82     	; 0xcf4 <vfprintf+0x270>
     ca2:	38 e0       	ldi	r19, 0x08	; 8
     ca4:	33 15       	cp	r19, r3
     ca6:	48 f1       	brcs	.+82     	; 0xcfa <vfprintf+0x276>
     ca8:	2c c0       	rjmp	.+88     	; 0xd02 <vfprintf+0x27e>
     caa:	76 fc       	sbrc	r7, 6
     cac:	2a c0       	rjmp	.+84     	; 0xd02 <vfprintf+0x27e>
     cae:	24 2d       	mov	r18, r4
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	20 17       	cp	r18, r16
     cb4:	31 07       	cpc	r19, r17
     cb6:	44 f0       	brlt	.+16     	; 0xcc8 <vfprintf+0x244>
     cb8:	0c 3f       	cpi	r16, 0xFC	; 252
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	18 07       	cpc	r17, r24
     cbe:	24 f0       	brlt	.+8      	; 0xcc8 <vfprintf+0x244>
     cc0:	90 e8       	ldi	r25, 0x80	; 128
     cc2:	79 2a       	or	r7, r25
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x244>
     cc6:	4a 94       	dec	r4
     cc8:	44 20       	and	r4, r4
     cca:	49 f0       	breq	.+18     	; 0xcde <vfprintf+0x25a>
     ccc:	e2 e0       	ldi	r30, 0x02	; 2
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	e4 0d       	add	r30, r4
     cd6:	f1 1d       	adc	r31, r1
     cd8:	80 81       	ld	r24, Z
     cda:	80 33       	cpi	r24, 0x30	; 48
     cdc:	a1 f3       	breq	.-24     	; 0xcc6 <vfprintf+0x242>
     cde:	77 fe       	sbrs	r7, 7
     ce0:	10 c0       	rjmp	.+32     	; 0xd02 <vfprintf+0x27e>
     ce2:	34 2c       	mov	r3, r4
     ce4:	33 94       	inc	r3
     ce6:	24 2d       	mov	r18, r4
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	02 17       	cp	r16, r18
     cec:	13 07       	cpc	r17, r19
     cee:	44 f4       	brge	.+16     	; 0xd00 <vfprintf+0x27c>
     cf0:	40 1a       	sub	r4, r16
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <vfprintf+0x27e>
     cf4:	33 24       	eor	r3, r3
     cf6:	33 94       	inc	r3
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <vfprintf+0x27e>
     cfa:	f8 e0       	ldi	r31, 0x08	; 8
     cfc:	3f 2e       	mov	r3, r31
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <vfprintf+0x27e>
     d00:	41 2c       	mov	r4, r1
     d02:	77 fe       	sbrs	r7, 7
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <vfprintf+0x290>
     d06:	10 16       	cp	r1, r16
     d08:	11 06       	cpc	r1, r17
     d0a:	3c f4       	brge	.+14     	; 0xd1a <vfprintf+0x296>
     d0c:	98 01       	movw	r18, r16
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <vfprintf+0x29a>
     d14:	25 e0       	ldi	r18, 0x05	; 5
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x29a>
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	66 20       	and	r6, r6
     d20:	11 f0       	breq	.+4      	; 0xd26 <vfprintf+0x2a2>
     d22:	2f 5f       	subi	r18, 0xFF	; 255
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	44 20       	and	r4, r4
     d28:	31 f0       	breq	.+12     	; 0xd36 <vfprintf+0x2b2>
     d2a:	44 2d       	mov	r20, r4
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	4f 5f       	subi	r20, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	24 0f       	add	r18, r20
     d34:	35 1f       	adc	r19, r21
     d36:	45 2d       	mov	r20, r5
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	24 17       	cp	r18, r20
     d3c:	35 07       	cpc	r19, r21
     d3e:	14 f4       	brge	.+4      	; 0xd44 <vfprintf+0x2c0>
     d40:	52 1a       	sub	r5, r18
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x2c2>
     d44:	51 2c       	mov	r5, r1
     d46:	87 2d       	mov	r24, r7
     d48:	89 70       	andi	r24, 0x09	; 9
     d4a:	49 f4       	brne	.+18     	; 0xd5e <vfprintf+0x2da>
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0x2d6>
     d4e:	b7 01       	movw	r22, r14
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     d58:	5a 94       	dec	r5
     d5a:	51 10       	cpse	r5, r1
     d5c:	f8 cf       	rjmp	.-16     	; 0xd4e <vfprintf+0x2ca>
     d5e:	66 20       	and	r6, r6
     d60:	29 f0       	breq	.+10     	; 0xd6c <vfprintf+0x2e8>
     d62:	b7 01       	movw	r22, r14
     d64:	86 2d       	mov	r24, r6
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     d6c:	73 fc       	sbrc	r7, 3
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <vfprintf+0x2fe>
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <vfprintf+0x2fa>
     d72:	b7 01       	movw	r22, r14
     d74:	80 e3       	ldi	r24, 0x30	; 48
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     d7c:	5a 94       	dec	r5
     d7e:	51 10       	cpse	r5, r1
     d80:	f8 cf       	rjmp	.-16     	; 0xd72 <vfprintf+0x2ee>
     d82:	77 fe       	sbrs	r7, 7
     d84:	53 c0       	rjmp	.+166    	; 0xe2c <vfprintf+0x3a8>
     d86:	38 01       	movw	r6, r16
     d88:	17 ff       	sbrs	r17, 7
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <vfprintf+0x30c>
     d8c:	61 2c       	mov	r6, r1
     d8e:	71 2c       	mov	r7, r1
     d90:	1e 86       	std	Y+14, r1	; 0x0e
     d92:	1d 86       	std	Y+13, r1	; 0x0d
     d94:	98 01       	movw	r18, r16
     d96:	23 19       	sub	r18, r3
     d98:	31 09       	sbc	r19, r1
     d9a:	38 8b       	std	Y+16, r19	; 0x10
     d9c:	2f 87       	std	Y+15, r18	; 0x0f
     d9e:	18 01       	movw	r2, r16
     da0:	26 18       	sub	r2, r6
     da2:	37 08       	sbc	r3, r7
     da4:	28 0c       	add	r2, r8
     da6:	39 1c       	adc	r3, r9
     da8:	64 2d       	mov	r22, r4
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	22 27       	eor	r18, r18
     dae:	33 27       	eor	r19, r19
     db0:	26 1b       	sub	r18, r22
     db2:	37 0b       	sbc	r19, r23
     db4:	3a 8b       	std	Y+18, r19	; 0x12
     db6:	29 8b       	std	Y+17, r18	; 0x11
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	63 16       	cp	r6, r19
     dbc:	73 06       	cpc	r7, r19
     dbe:	29 f4       	brne	.+10     	; 0xdca <vfprintf+0x346>
     dc0:	b7 01       	movw	r22, r14
     dc2:	8e e2       	ldi	r24, 0x2E	; 46
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     dca:	06 15       	cp	r16, r6
     dcc:	17 05       	cpc	r17, r7
     dce:	5c f0       	brlt	.+22     	; 0xde6 <vfprintf+0x362>
     dd0:	2f 85       	ldd	r18, Y+15	; 0x0f
     dd2:	38 89       	ldd	r19, Y+16	; 0x10
     dd4:	26 15       	cp	r18, r6
     dd6:	37 05       	cpc	r19, r7
     dd8:	34 f4       	brge	.+12     	; 0xde6 <vfprintf+0x362>
     dda:	ed 85       	ldd	r30, Y+13	; 0x0d
     ddc:	fe 85       	ldd	r31, Y+14	; 0x0e
     dde:	e2 0d       	add	r30, r2
     de0:	f3 1d       	adc	r31, r3
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <vfprintf+0x364>
     de6:	80 e3       	ldi	r24, 0x30	; 48
     de8:	31 e0       	ldi	r19, 0x01	; 1
     dea:	63 1a       	sub	r6, r19
     dec:	71 08       	sbc	r7, r1
     dee:	2d 85       	ldd	r18, Y+13	; 0x0d
     df0:	3e 85       	ldd	r19, Y+14	; 0x0e
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	3e 87       	std	Y+14, r19	; 0x0e
     df8:	2d 87       	std	Y+13, r18	; 0x0d
     dfa:	29 89       	ldd	r18, Y+17	; 0x11
     dfc:	3a 89       	ldd	r19, Y+18	; 0x12
     dfe:	62 16       	cp	r6, r18
     e00:	73 06       	cpc	r7, r19
     e02:	2c f0       	brlt	.+10     	; 0xe0e <vfprintf+0x38a>
     e04:	b7 01       	movw	r22, r14
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     e0c:	d5 cf       	rjmp	.-86     	; 0xdb8 <vfprintf+0x334>
     e0e:	60 16       	cp	r6, r16
     e10:	71 06       	cpc	r7, r17
     e12:	49 f4       	brne	.+18     	; 0xe26 <vfprintf+0x3a2>
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	96 33       	cpi	r25, 0x36	; 54
     e18:	28 f4       	brcc	.+10     	; 0xe24 <vfprintf+0x3a0>
     e1a:	95 33       	cpi	r25, 0x35	; 53
     e1c:	21 f4       	brne	.+8      	; 0xe26 <vfprintf+0x3a2>
     e1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e20:	34 fd       	sbrc	r19, 4
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <vfprintf+0x3a2>
     e24:	81 e3       	ldi	r24, 0x31	; 49
     e26:	b7 01       	movw	r22, r14
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	4a c0       	rjmp	.+148    	; 0xec0 <vfprintf+0x43c>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	81 33       	cpi	r24, 0x31	; 49
     e30:	19 f0       	breq	.+6      	; 0xe38 <vfprintf+0x3b4>
     e32:	2c 85       	ldd	r18, Y+12	; 0x0c
     e34:	2f 7e       	andi	r18, 0xEF	; 239
     e36:	2c 87       	std	Y+12, r18	; 0x0c
     e38:	b7 01       	movw	r22, r14
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     e40:	41 10       	cpse	r4, r1
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <vfprintf+0x3ca>
     e44:	74 fe       	sbrs	r7, 4
     e46:	16 c0       	rjmp	.+44     	; 0xe74 <vfprintf+0x3f0>
     e48:	85 e4       	ldi	r24, 0x45	; 69
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <vfprintf+0x3f4>
     e4e:	b7 01       	movw	r22, r14
     e50:	8e e2       	ldi	r24, 0x2E	; 46
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     e58:	e2 e0       	ldi	r30, 0x02	; 2
     e5a:	6e 2e       	mov	r6, r30
     e5c:	f4 01       	movw	r30, r8
     e5e:	e6 0d       	add	r30, r6
     e60:	f1 1d       	adc	r31, r1
     e62:	63 94       	inc	r6
     e64:	b7 01       	movw	r22, r14
     e66:	80 81       	ld	r24, Z
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     e6e:	4a 94       	dec	r4
     e70:	a9 f7       	brne	.-22     	; 0xe5c <vfprintf+0x3d8>
     e72:	e8 cf       	rjmp	.-48     	; 0xe44 <vfprintf+0x3c0>
     e74:	85 e6       	ldi	r24, 0x65	; 101
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	b7 01       	movw	r22, r14
     e7a:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     e7e:	17 fd       	sbrc	r17, 7
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <vfprintf+0x40a>
     e82:	01 15       	cp	r16, r1
     e84:	11 05       	cpc	r17, r1
     e86:	41 f4       	brne	.+16     	; 0xe98 <vfprintf+0x414>
     e88:	3c 85       	ldd	r19, Y+12	; 0x0c
     e8a:	34 ff       	sbrs	r19, 4
     e8c:	05 c0       	rjmp	.+10     	; 0xe98 <vfprintf+0x414>
     e8e:	11 95       	neg	r17
     e90:	01 95       	neg	r16
     e92:	11 09       	sbc	r17, r1
     e94:	8d e2       	ldi	r24, 0x2D	; 45
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <vfprintf+0x416>
     e98:	8b e2       	ldi	r24, 0x2B	; 43
     e9a:	b7 01       	movw	r22, r14
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     ea2:	80 e3       	ldi	r24, 0x30	; 48
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <vfprintf+0x428>
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	0a 50       	subi	r16, 0x0A	; 10
     eaa:	11 09       	sbc	r17, r1
     eac:	0a 30       	cpi	r16, 0x0A	; 10
     eae:	11 05       	cpc	r17, r1
     eb0:	d4 f7       	brge	.-12     	; 0xea6 <vfprintf+0x422>
     eb2:	b7 01       	movw	r22, r14
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     eba:	b7 01       	movw	r22, r14
     ebc:	c8 01       	movw	r24, r16
     ebe:	c0 96       	adiw	r24, 0x30	; 48
     ec0:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     ec4:	55 c1       	rjmp	.+682    	; 0x1170 <vfprintf+0x6ec>
     ec6:	83 36       	cpi	r24, 0x63	; 99
     ec8:	31 f0       	breq	.+12     	; 0xed6 <vfprintf+0x452>
     eca:	83 37       	cpi	r24, 0x73	; 115
     ecc:	81 f0       	breq	.+32     	; 0xeee <vfprintf+0x46a>
     ece:	83 35       	cpi	r24, 0x53	; 83
     ed0:	09 f0       	breq	.+2      	; 0xed4 <vfprintf+0x450>
     ed2:	5e c0       	rjmp	.+188    	; 0xf90 <vfprintf+0x50c>
     ed4:	24 c0       	rjmp	.+72     	; 0xf1e <vfprintf+0x49a>
     ed6:	68 01       	movw	r12, r16
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	c8 0e       	add	r12, r24
     edc:	d1 1c       	adc	r13, r1
     ede:	f8 01       	movw	r30, r16
     ee0:	80 81       	ld	r24, Z
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	66 24       	eor	r6, r6
     ee6:	63 94       	inc	r6
     ee8:	71 2c       	mov	r7, r1
     eea:	84 01       	movw	r16, r8
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <vfprintf+0x492>
     eee:	68 01       	movw	r12, r16
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	cf 0e       	add	r12, r31
     ef4:	d1 1c       	adc	r13, r1
     ef6:	f8 01       	movw	r30, r16
     ef8:	00 81       	ld	r16, Z
     efa:	11 81       	ldd	r17, Z+1	; 0x01
     efc:	26 ff       	sbrs	r18, 6
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <vfprintf+0x482>
     f00:	64 2d       	mov	r22, r4
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x486>
     f06:	6f ef       	ldi	r22, 0xFF	; 255
     f08:	7f ef       	ldi	r23, 0xFF	; 255
     f0a:	c8 01       	movw	r24, r16
     f0c:	2b 8b       	std	Y+19, r18	; 0x13
     f0e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <strnlen>
     f12:	3c 01       	movw	r6, r24
     f14:	2b 89       	ldd	r18, Y+19	; 0x13
     f16:	6f e7       	ldi	r22, 0x7F	; 127
     f18:	46 2e       	mov	r4, r22
     f1a:	42 22       	and	r4, r18
     f1c:	17 c0       	rjmp	.+46     	; 0xf4c <vfprintf+0x4c8>
     f1e:	68 01       	movw	r12, r16
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	cf 0e       	add	r12, r31
     f24:	d1 1c       	adc	r13, r1
     f26:	f8 01       	movw	r30, r16
     f28:	00 81       	ld	r16, Z
     f2a:	11 81       	ldd	r17, Z+1	; 0x01
     f2c:	26 ff       	sbrs	r18, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x4b2>
     f30:	64 2d       	mov	r22, r4
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x4b6>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c8 01       	movw	r24, r16
     f3c:	2b 8b       	std	Y+19, r18	; 0x13
     f3e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <strnlen_P>
     f42:	3c 01       	movw	r6, r24
     f44:	2b 89       	ldd	r18, Y+19	; 0x13
     f46:	50 e8       	ldi	r21, 0x80	; 128
     f48:	45 2e       	mov	r4, r21
     f4a:	42 2a       	or	r4, r18
     f4c:	43 fc       	sbrc	r4, 3
     f4e:	1c c0       	rjmp	.+56     	; 0xf88 <vfprintf+0x504>
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x4da>
     f52:	b7 01       	movw	r22, r14
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     f5c:	5a 94       	dec	r5
     f5e:	85 2d       	mov	r24, r5
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	68 16       	cp	r6, r24
     f64:	79 06       	cpc	r7, r25
     f66:	a8 f3       	brcs	.-22     	; 0xf52 <vfprintf+0x4ce>
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <vfprintf+0x504>
     f6a:	f8 01       	movw	r30, r16
     f6c:	47 fc       	sbrc	r4, 7
     f6e:	85 91       	lpm	r24, Z+
     f70:	47 fe       	sbrs	r4, 7
     f72:	81 91       	ld	r24, Z+
     f74:	8f 01       	movw	r16, r30
     f76:	b7 01       	movw	r22, r14
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
     f7e:	51 10       	cpse	r5, r1
     f80:	5a 94       	dec	r5
     f82:	f1 e0       	ldi	r31, 0x01	; 1
     f84:	6f 1a       	sub	r6, r31
     f86:	71 08       	sbc	r7, r1
     f88:	61 14       	cp	r6, r1
     f8a:	71 04       	cpc	r7, r1
     f8c:	71 f7       	brne	.-36     	; 0xf6a <vfprintf+0x4e6>
     f8e:	f0 c0       	rjmp	.+480    	; 0x1170 <vfprintf+0x6ec>
     f90:	84 36       	cpi	r24, 0x64	; 100
     f92:	11 f0       	breq	.+4      	; 0xf98 <vfprintf+0x514>
     f94:	89 36       	cpi	r24, 0x69	; 105
     f96:	61 f5       	brne	.+88     	; 0xff0 <vfprintf+0x56c>
     f98:	68 01       	movw	r12, r16
     f9a:	27 ff       	sbrs	r18, 7
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <vfprintf+0x52c>
     f9e:	34 e0       	ldi	r19, 0x04	; 4
     fa0:	c3 0e       	add	r12, r19
     fa2:	d1 1c       	adc	r13, r1
     fa4:	f8 01       	movw	r30, r16
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0a c0       	rjmp	.+20     	; 0xfc4 <vfprintf+0x540>
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	cf 0e       	add	r12, r31
     fb4:	d1 1c       	adc	r13, r1
     fb6:	f8 01       	movw	r30, r16
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	88 27       	eor	r24, r24
     fbe:	77 fd       	sbrc	r23, 7
     fc0:	80 95       	com	r24
     fc2:	98 2f       	mov	r25, r24
     fc4:	4f e6       	ldi	r20, 0x6F	; 111
     fc6:	74 2e       	mov	r7, r20
     fc8:	72 22       	and	r7, r18
     fca:	97 ff       	sbrs	r25, 7
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x55c>
     fce:	90 95       	com	r25
     fd0:	80 95       	com	r24
     fd2:	70 95       	com	r23
     fd4:	61 95       	neg	r22
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	f0 e8       	ldi	r31, 0x80	; 128
     fde:	7f 2a       	or	r7, r31
     fe0:	2a e0       	ldi	r18, 0x0A	; 10
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	a4 01       	movw	r20, r8
     fe6:	0e 94 a6 0c 	call	0x194c	; 0x194c <__ultoa_invert>
     fea:	68 2e       	mov	r6, r24
     fec:	68 18       	sub	r6, r8
     fee:	47 c0       	rjmp	.+142    	; 0x107e <vfprintf+0x5fa>
     ff0:	85 37       	cpi	r24, 0x75	; 117
     ff2:	31 f4       	brne	.+12     	; 0x1000 <vfprintf+0x57c>
     ff4:	3f ee       	ldi	r19, 0xEF	; 239
     ff6:	73 2e       	mov	r7, r19
     ff8:	72 22       	and	r7, r18
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	24 c0       	rjmp	.+72     	; 0x1048 <vfprintf+0x5c4>
    1000:	99 ef       	ldi	r25, 0xF9	; 249
    1002:	79 2e       	mov	r7, r25
    1004:	72 22       	and	r7, r18
    1006:	8f 36       	cpi	r24, 0x6F	; 111
    1008:	b9 f0       	breq	.+46     	; 0x1038 <vfprintf+0x5b4>
    100a:	20 f4       	brcc	.+8      	; 0x1014 <vfprintf+0x590>
    100c:	88 35       	cpi	r24, 0x58	; 88
    100e:	09 f0       	breq	.+2      	; 0x1012 <vfprintf+0x58e>
    1010:	b2 c0       	rjmp	.+356    	; 0x1176 <vfprintf+0x6f2>
    1012:	0d c0       	rjmp	.+26     	; 0x102e <vfprintf+0x5aa>
    1014:	80 37       	cpi	r24, 0x70	; 112
    1016:	21 f0       	breq	.+8      	; 0x1020 <vfprintf+0x59c>
    1018:	88 37       	cpi	r24, 0x78	; 120
    101a:	09 f0       	breq	.+2      	; 0x101e <vfprintf+0x59a>
    101c:	ac c0       	rjmp	.+344    	; 0x1176 <vfprintf+0x6f2>
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0x5a0>
    1020:	20 e1       	ldi	r18, 0x10	; 16
    1022:	72 2a       	or	r7, r18
    1024:	74 fe       	sbrs	r7, 4
    1026:	0b c0       	rjmp	.+22     	; 0x103e <vfprintf+0x5ba>
    1028:	34 e0       	ldi	r19, 0x04	; 4
    102a:	73 2a       	or	r7, r19
    102c:	08 c0       	rjmp	.+16     	; 0x103e <vfprintf+0x5ba>
    102e:	24 ff       	sbrs	r18, 4
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <vfprintf+0x5c0>
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	78 2a       	or	r7, r24
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0x5c0>
    1038:	28 e0       	ldi	r18, 0x08	; 8
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <vfprintf+0x5c4>
    103e:	20 e1       	ldi	r18, 0x10	; 16
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <vfprintf+0x5c4>
    1044:	20 e1       	ldi	r18, 0x10	; 16
    1046:	32 e0       	ldi	r19, 0x02	; 2
    1048:	68 01       	movw	r12, r16
    104a:	77 fe       	sbrs	r7, 7
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <vfprintf+0x5dc>
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	c9 0e       	add	r12, r25
    1052:	d1 1c       	adc	r13, r1
    1054:	f8 01       	movw	r30, r16
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <vfprintf+0x5ec>
    1060:	f2 e0       	ldi	r31, 0x02	; 2
    1062:	cf 0e       	add	r12, r31
    1064:	d1 1c       	adc	r13, r1
    1066:	f8 01       	movw	r30, r16
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a4 01       	movw	r20, r8
    1072:	0e 94 a6 0c 	call	0x194c	; 0x194c <__ultoa_invert>
    1076:	68 2e       	mov	r6, r24
    1078:	68 18       	sub	r6, r8
    107a:	ff e7       	ldi	r31, 0x7F	; 127
    107c:	7f 22       	and	r7, r31
    107e:	76 fe       	sbrs	r7, 6
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <vfprintf+0x614>
    1082:	07 2d       	mov	r16, r7
    1084:	0e 7f       	andi	r16, 0xFE	; 254
    1086:	64 14       	cp	r6, r4
    1088:	50 f4       	brcc	.+20     	; 0x109e <vfprintf+0x61a>
    108a:	74 fe       	sbrs	r7, 4
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <vfprintf+0x61e>
    108e:	72 fc       	sbrc	r7, 2
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <vfprintf+0x61e>
    1092:	07 2d       	mov	r16, r7
    1094:	0e 7e       	andi	r16, 0xEE	; 238
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <vfprintf+0x61e>
    1098:	16 2d       	mov	r17, r6
    109a:	07 2d       	mov	r16, r7
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <vfprintf+0x620>
    109e:	16 2d       	mov	r17, r6
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <vfprintf+0x620>
    10a2:	14 2d       	mov	r17, r4
    10a4:	04 ff       	sbrs	r16, 4
    10a6:	0c c0       	rjmp	.+24     	; 0x10c0 <vfprintf+0x63c>
    10a8:	fe 01       	movw	r30, r28
    10aa:	e6 0d       	add	r30, r6
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	80 33       	cpi	r24, 0x30	; 48
    10b2:	11 f4       	brne	.+4      	; 0x10b8 <vfprintf+0x634>
    10b4:	09 7e       	andi	r16, 0xE9	; 233
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <vfprintf+0x644>
    10b8:	02 ff       	sbrs	r16, 2
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <vfprintf+0x642>
    10bc:	1e 5f       	subi	r17, 0xFE	; 254
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <vfprintf+0x644>
    10c0:	80 2f       	mov	r24, r16
    10c2:	86 78       	andi	r24, 0x86	; 134
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <vfprintf+0x644>
    10c6:	1f 5f       	subi	r17, 0xFF	; 255
    10c8:	03 fd       	sbrc	r16, 3
    10ca:	12 c0       	rjmp	.+36     	; 0x10f0 <vfprintf+0x66c>
    10cc:	00 ff       	sbrs	r16, 0
    10ce:	0d c0       	rjmp	.+26     	; 0x10ea <vfprintf+0x666>
    10d0:	46 2c       	mov	r4, r6
    10d2:	15 15       	cp	r17, r5
    10d4:	50 f4       	brcc	.+20     	; 0x10ea <vfprintf+0x666>
    10d6:	45 0c       	add	r4, r5
    10d8:	41 1a       	sub	r4, r17
    10da:	15 2d       	mov	r17, r5
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0x666>
    10de:	b7 01       	movw	r22, r14
    10e0:	80 e2       	ldi	r24, 0x20	; 32
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    10e8:	1f 5f       	subi	r17, 0xFF	; 255
    10ea:	15 15       	cp	r17, r5
    10ec:	c0 f3       	brcs	.-16     	; 0x10de <vfprintf+0x65a>
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <vfprintf+0x674>
    10f0:	15 15       	cp	r17, r5
    10f2:	10 f4       	brcc	.+4      	; 0x10f8 <vfprintf+0x674>
    10f4:	51 1a       	sub	r5, r17
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <vfprintf+0x676>
    10f8:	51 2c       	mov	r5, r1
    10fa:	04 ff       	sbrs	r16, 4
    10fc:	10 c0       	rjmp	.+32     	; 0x111e <vfprintf+0x69a>
    10fe:	b7 01       	movw	r22, r14
    1100:	80 e3       	ldi	r24, 0x30	; 48
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1108:	02 ff       	sbrs	r16, 2
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <vfprintf+0x6c4>
    110c:	01 ff       	sbrs	r16, 1
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <vfprintf+0x692>
    1110:	88 e5       	ldi	r24, 0x58	; 88
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x696>
    1116:	88 e7       	ldi	r24, 0x78	; 120
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b7 01       	movw	r22, r14
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <vfprintf+0x6b2>
    111e:	80 2f       	mov	r24, r16
    1120:	86 78       	andi	r24, 0x86	; 134
    1122:	91 f0       	breq	.+36     	; 0x1148 <vfprintf+0x6c4>
    1124:	01 fd       	sbrc	r16, 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x6a8>
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x6aa>
    112c:	8b e2       	ldi	r24, 0x2B	; 43
    112e:	07 fd       	sbrc	r16, 7
    1130:	8d e2       	ldi	r24, 0x2D	; 45
    1132:	b7 01       	movw	r22, r14
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfprintf+0x6c4>
    113c:	b7 01       	movw	r22, r14
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1146:	4a 94       	dec	r4
    1148:	64 14       	cp	r6, r4
    114a:	c0 f3       	brcs	.-16     	; 0x113c <vfprintf+0x6b8>
    114c:	6a 94       	dec	r6
    114e:	f4 01       	movw	r30, r8
    1150:	e6 0d       	add	r30, r6
    1152:	f1 1d       	adc	r31, r1
    1154:	b7 01       	movw	r22, r14
    1156:	80 81       	ld	r24, Z
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    115e:	61 10       	cpse	r6, r1
    1160:	f5 cf       	rjmp	.-22     	; 0x114c <vfprintf+0x6c8>
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x6ec>
    1164:	b7 01       	movw	r22, r14
    1166:	80 e2       	ldi	r24, 0x20	; 32
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    116e:	5a 94       	dec	r5
    1170:	51 10       	cpse	r5, r1
    1172:	f8 cf       	rjmp	.-16     	; 0x1164 <vfprintf+0x6e0>
    1174:	97 cc       	rjmp	.-1746   	; 0xaa4 <vfprintf+0x20>
    1176:	f7 01       	movw	r30, r14
    1178:	26 81       	ldd	r18, Z+6	; 0x06
    117a:	37 81       	ldd	r19, Z+7	; 0x07
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <vfprintf+0x6fe>
    117e:	2f ef       	ldi	r18, 0xFF	; 255
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	c9 01       	movw	r24, r18
    1184:	63 96       	adiw	r28, 0x13	; 19
    1186:	e2 e1       	ldi	r30, 0x12	; 18
    1188:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__epilogue_restores__>

0000118c <__subsf3>:
    118c:	50 58       	subi	r21, 0x80	; 128

0000118e <__addsf3>:
    118e:	bb 27       	eor	r27, r27
    1190:	aa 27       	eor	r26, r26
    1192:	0e d0       	rcall	.+28     	; 0x11b0 <__addsf3x>
    1194:	4d c1       	rjmp	.+666    	; 0x1430 <__fp_round>
    1196:	3e d1       	rcall	.+636    	; 0x1414 <__fp_pscA>
    1198:	30 f0       	brcs	.+12     	; 0x11a6 <__addsf3+0x18>
    119a:	43 d1       	rcall	.+646    	; 0x1422 <__fp_pscB>
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__addsf3+0x18>
    119e:	31 f4       	brne	.+12     	; 0x11ac <__addsf3+0x1e>
    11a0:	9f 3f       	cpi	r25, 0xFF	; 255
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__addsf3+0x1a>
    11a4:	1e f4       	brtc	.+6      	; 0x11ac <__addsf3+0x1e>
    11a6:	33 c1       	rjmp	.+614    	; 0x140e <__fp_nan>
    11a8:	0e f4       	brtc	.+2      	; 0x11ac <__addsf3+0x1e>
    11aa:	e0 95       	com	r30
    11ac:	e7 fb       	bst	r30, 7
    11ae:	29 c1       	rjmp	.+594    	; 0x1402 <__fp_inf>

000011b0 <__addsf3x>:
    11b0:	e9 2f       	mov	r30, r25
    11b2:	4f d1       	rcall	.+670    	; 0x1452 <__fp_split3>
    11b4:	80 f3       	brcs	.-32     	; 0x1196 <__addsf3+0x8>
    11b6:	ba 17       	cp	r27, r26
    11b8:	62 07       	cpc	r22, r18
    11ba:	73 07       	cpc	r23, r19
    11bc:	84 07       	cpc	r24, r20
    11be:	95 07       	cpc	r25, r21
    11c0:	18 f0       	brcs	.+6      	; 0x11c8 <__addsf3x+0x18>
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <__addsf3x+0x30>
    11c4:	9e f5       	brtc	.+102    	; 0x122c <__addsf3x+0x7c>
    11c6:	67 c1       	rjmp	.+718    	; 0x1496 <__fp_zero>
    11c8:	0e f4       	brtc	.+2      	; 0x11cc <__addsf3x+0x1c>
    11ca:	e0 95       	com	r30
    11cc:	0b 2e       	mov	r0, r27
    11ce:	ba 2f       	mov	r27, r26
    11d0:	a0 2d       	mov	r26, r0
    11d2:	0b 01       	movw	r0, r22
    11d4:	b9 01       	movw	r22, r18
    11d6:	90 01       	movw	r18, r0
    11d8:	0c 01       	movw	r0, r24
    11da:	ca 01       	movw	r24, r20
    11dc:	a0 01       	movw	r20, r0
    11de:	11 24       	eor	r1, r1
    11e0:	ff 27       	eor	r31, r31
    11e2:	59 1b       	sub	r21, r25
    11e4:	99 f0       	breq	.+38     	; 0x120c <__addsf3x+0x5c>
    11e6:	59 3f       	cpi	r21, 0xF9	; 249
    11e8:	50 f4       	brcc	.+20     	; 0x11fe <__addsf3x+0x4e>
    11ea:	50 3e       	cpi	r21, 0xE0	; 224
    11ec:	68 f1       	brcs	.+90     	; 0x1248 <__addsf3x+0x98>
    11ee:	1a 16       	cp	r1, r26
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	a2 2f       	mov	r26, r18
    11f4:	23 2f       	mov	r18, r19
    11f6:	34 2f       	mov	r19, r20
    11f8:	44 27       	eor	r20, r20
    11fa:	58 5f       	subi	r21, 0xF8	; 248
    11fc:	f3 cf       	rjmp	.-26     	; 0x11e4 <__addsf3x+0x34>
    11fe:	46 95       	lsr	r20
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	a7 95       	ror	r26
    1206:	f0 40       	sbci	r31, 0x00	; 0
    1208:	53 95       	inc	r21
    120a:	c9 f7       	brne	.-14     	; 0x11fe <__addsf3x+0x4e>
    120c:	7e f4       	brtc	.+30     	; 0x122c <__addsf3x+0x7c>
    120e:	1f 16       	cp	r1, r31
    1210:	ba 0b       	sbc	r27, r26
    1212:	62 0b       	sbc	r22, r18
    1214:	73 0b       	sbc	r23, r19
    1216:	84 0b       	sbc	r24, r20
    1218:	ba f0       	brmi	.+46     	; 0x1248 <__addsf3x+0x98>
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	a1 f0       	breq	.+40     	; 0x1246 <__addsf3x+0x96>
    121e:	ff 0f       	add	r31, r31
    1220:	bb 1f       	adc	r27, r27
    1222:	66 1f       	adc	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	c2 f7       	brpl	.-16     	; 0x121a <__addsf3x+0x6a>
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <__addsf3x+0x98>
    122c:	ba 0f       	add	r27, r26
    122e:	62 1f       	adc	r22, r18
    1230:	73 1f       	adc	r23, r19
    1232:	84 1f       	adc	r24, r20
    1234:	48 f4       	brcc	.+18     	; 0x1248 <__addsf3x+0x98>
    1236:	87 95       	ror	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	9e 3f       	cpi	r25, 0xFE	; 254
    1242:	08 f0       	brcs	.+2      	; 0x1246 <__addsf3x+0x96>
    1244:	b3 cf       	rjmp	.-154    	; 0x11ac <__addsf3+0x1e>
    1246:	93 95       	inc	r25
    1248:	88 0f       	add	r24, r24
    124a:	08 f0       	brcs	.+2      	; 0x124e <__addsf3x+0x9e>
    124c:	99 27       	eor	r25, r25
    124e:	ee 0f       	add	r30, r30
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	08 95       	ret

00001256 <__divsf3>:
    1256:	0c d0       	rcall	.+24     	; 0x1270 <__divsf3x>
    1258:	eb c0       	rjmp	.+470    	; 0x1430 <__fp_round>
    125a:	e3 d0       	rcall	.+454    	; 0x1422 <__fp_pscB>
    125c:	40 f0       	brcs	.+16     	; 0x126e <__divsf3+0x18>
    125e:	da d0       	rcall	.+436    	; 0x1414 <__fp_pscA>
    1260:	30 f0       	brcs	.+12     	; 0x126e <__divsf3+0x18>
    1262:	21 f4       	brne	.+8      	; 0x126c <__divsf3+0x16>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	19 f0       	breq	.+6      	; 0x126e <__divsf3+0x18>
    1268:	cc c0       	rjmp	.+408    	; 0x1402 <__fp_inf>
    126a:	51 11       	cpse	r21, r1
    126c:	15 c1       	rjmp	.+554    	; 0x1498 <__fp_szero>
    126e:	cf c0       	rjmp	.+414    	; 0x140e <__fp_nan>

00001270 <__divsf3x>:
    1270:	f0 d0       	rcall	.+480    	; 0x1452 <__fp_split3>
    1272:	98 f3       	brcs	.-26     	; 0x125a <__divsf3+0x4>

00001274 <__divsf3_pse>:
    1274:	99 23       	and	r25, r25
    1276:	c9 f3       	breq	.-14     	; 0x126a <__divsf3+0x14>
    1278:	55 23       	and	r21, r21
    127a:	b1 f3       	breq	.-20     	; 0x1268 <__divsf3+0x12>
    127c:	95 1b       	sub	r25, r21
    127e:	55 0b       	sbc	r21, r21
    1280:	bb 27       	eor	r27, r27
    1282:	aa 27       	eor	r26, r26
    1284:	62 17       	cp	r22, r18
    1286:	73 07       	cpc	r23, r19
    1288:	84 07       	cpc	r24, r20
    128a:	38 f0       	brcs	.+14     	; 0x129a <__divsf3_pse+0x26>
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	44 1f       	adc	r20, r20
    1296:	aa 1f       	adc	r26, r26
    1298:	a9 f3       	breq	.-22     	; 0x1284 <__divsf3_pse+0x10>
    129a:	33 d0       	rcall	.+102    	; 0x1302 <__divsf3_pse+0x8e>
    129c:	0e 2e       	mov	r0, r30
    129e:	3a f0       	brmi	.+14     	; 0x12ae <__divsf3_pse+0x3a>
    12a0:	e0 e8       	ldi	r30, 0x80	; 128
    12a2:	30 d0       	rcall	.+96     	; 0x1304 <__divsf3_pse+0x90>
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	50 40       	sbci	r21, 0x00	; 0
    12a8:	e6 95       	lsr	r30
    12aa:	00 1c       	adc	r0, r0
    12ac:	ca f7       	brpl	.-14     	; 0x12a0 <__divsf3_pse+0x2c>
    12ae:	29 d0       	rcall	.+82     	; 0x1302 <__divsf3_pse+0x8e>
    12b0:	fe 2f       	mov	r31, r30
    12b2:	27 d0       	rcall	.+78     	; 0x1302 <__divsf3_pse+0x8e>
    12b4:	66 0f       	add	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	88 1f       	adc	r24, r24
    12ba:	bb 1f       	adc	r27, r27
    12bc:	26 17       	cp	r18, r22
    12be:	37 07       	cpc	r19, r23
    12c0:	48 07       	cpc	r20, r24
    12c2:	ab 07       	cpc	r26, r27
    12c4:	b0 e8       	ldi	r27, 0x80	; 128
    12c6:	09 f0       	breq	.+2      	; 0x12ca <__divsf3_pse+0x56>
    12c8:	bb 0b       	sbc	r27, r27
    12ca:	80 2d       	mov	r24, r0
    12cc:	bf 01       	movw	r22, r30
    12ce:	ff 27       	eor	r31, r31
    12d0:	93 58       	subi	r25, 0x83	; 131
    12d2:	5f 4f       	sbci	r21, 0xFF	; 255
    12d4:	2a f0       	brmi	.+10     	; 0x12e0 <__divsf3_pse+0x6c>
    12d6:	9e 3f       	cpi	r25, 0xFE	; 254
    12d8:	51 05       	cpc	r21, r1
    12da:	68 f0       	brcs	.+26     	; 0x12f6 <__divsf3_pse+0x82>
    12dc:	92 c0       	rjmp	.+292    	; 0x1402 <__fp_inf>
    12de:	dc c0       	rjmp	.+440    	; 0x1498 <__fp_szero>
    12e0:	5f 3f       	cpi	r21, 0xFF	; 255
    12e2:	ec f3       	brlt	.-6      	; 0x12de <__divsf3_pse+0x6a>
    12e4:	98 3e       	cpi	r25, 0xE8	; 232
    12e6:	dc f3       	brlt	.-10     	; 0x12de <__divsf3_pse+0x6a>
    12e8:	86 95       	lsr	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	b7 95       	ror	r27
    12f0:	f7 95       	ror	r31
    12f2:	9f 5f       	subi	r25, 0xFF	; 255
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__divsf3_pse+0x74>
    12f6:	88 0f       	add	r24, r24
    12f8:	91 1d       	adc	r25, r1
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret
    1302:	e1 e0       	ldi	r30, 0x01	; 1
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	bb 1f       	adc	r27, r27
    130c:	62 17       	cp	r22, r18
    130e:	73 07       	cpc	r23, r19
    1310:	84 07       	cpc	r24, r20
    1312:	ba 07       	cpc	r27, r26
    1314:	20 f0       	brcs	.+8      	; 0x131e <__divsf3_pse+0xaa>
    1316:	62 1b       	sub	r22, r18
    1318:	73 0b       	sbc	r23, r19
    131a:	84 0b       	sbc	r24, r20
    131c:	ba 0b       	sbc	r27, r26
    131e:	ee 1f       	adc	r30, r30
    1320:	88 f7       	brcc	.-30     	; 0x1304 <__divsf3_pse+0x90>
    1322:	e0 95       	com	r30
    1324:	08 95       	ret

00001326 <__fixsfsi>:
    1326:	04 d0       	rcall	.+8      	; 0x1330 <__fixunssfsi>
    1328:	68 94       	set
    132a:	b1 11       	cpse	r27, r1
    132c:	b5 c0       	rjmp	.+362    	; 0x1498 <__fp_szero>
    132e:	08 95       	ret

00001330 <__fixunssfsi>:
    1330:	98 d0       	rcall	.+304    	; 0x1462 <__fp_splitA>
    1332:	88 f0       	brcs	.+34     	; 0x1356 <__fixunssfsi+0x26>
    1334:	9f 57       	subi	r25, 0x7F	; 127
    1336:	90 f0       	brcs	.+36     	; 0x135c <__fixunssfsi+0x2c>
    1338:	b9 2f       	mov	r27, r25
    133a:	99 27       	eor	r25, r25
    133c:	b7 51       	subi	r27, 0x17	; 23
    133e:	a0 f0       	brcs	.+40     	; 0x1368 <__fixunssfsi+0x38>
    1340:	d1 f0       	breq	.+52     	; 0x1376 <__fixunssfsi+0x46>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a f0       	brmi	.+6      	; 0x1352 <__fixunssfsi+0x22>
    134c:	ba 95       	dec	r27
    134e:	c9 f7       	brne	.-14     	; 0x1342 <__fixunssfsi+0x12>
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <__fixunssfsi+0x46>
    1352:	b1 30       	cpi	r27, 0x01	; 1
    1354:	81 f0       	breq	.+32     	; 0x1376 <__fixunssfsi+0x46>
    1356:	9f d0       	rcall	.+318    	; 0x1496 <__fp_zero>
    1358:	b1 e0       	ldi	r27, 0x01	; 1
    135a:	08 95       	ret
    135c:	9c c0       	rjmp	.+312    	; 0x1496 <__fp_zero>
    135e:	67 2f       	mov	r22, r23
    1360:	78 2f       	mov	r23, r24
    1362:	88 27       	eor	r24, r24
    1364:	b8 5f       	subi	r27, 0xF8	; 248
    1366:	39 f0       	breq	.+14     	; 0x1376 <__fixunssfsi+0x46>
    1368:	b9 3f       	cpi	r27, 0xF9	; 249
    136a:	cc f3       	brlt	.-14     	; 0x135e <__fixunssfsi+0x2e>
    136c:	86 95       	lsr	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b3 95       	inc	r27
    1374:	d9 f7       	brne	.-10     	; 0x136c <__fixunssfsi+0x3c>
    1376:	3e f4       	brtc	.+14     	; 0x1386 <__fixunssfsi+0x56>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__floatunsisf>:
    1388:	e8 94       	clt
    138a:	09 c0       	rjmp	.+18     	; 0x139e <__floatsisf+0x12>

0000138c <__floatsisf>:
    138c:	97 fb       	bst	r25, 7
    138e:	3e f4       	brtc	.+14     	; 0x139e <__floatsisf+0x12>
    1390:	90 95       	com	r25
    1392:	80 95       	com	r24
    1394:	70 95       	com	r23
    1396:	61 95       	neg	r22
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	99 23       	and	r25, r25
    13a0:	a9 f0       	breq	.+42     	; 0x13cc <__floatsisf+0x40>
    13a2:	f9 2f       	mov	r31, r25
    13a4:	96 e9       	ldi	r25, 0x96	; 150
    13a6:	bb 27       	eor	r27, r27
    13a8:	93 95       	inc	r25
    13aa:	f6 95       	lsr	r31
    13ac:	87 95       	ror	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	b7 95       	ror	r27
    13b4:	f1 11       	cpse	r31, r1
    13b6:	f8 cf       	rjmp	.-16     	; 0x13a8 <__floatsisf+0x1c>
    13b8:	fa f4       	brpl	.+62     	; 0x13f8 <__floatsisf+0x6c>
    13ba:	bb 0f       	add	r27, r27
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__floatsisf+0x36>
    13be:	60 ff       	sbrs	r22, 0
    13c0:	1b c0       	rjmp	.+54     	; 0x13f8 <__floatsisf+0x6c>
    13c2:	6f 5f       	subi	r22, 0xFF	; 255
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	16 c0       	rjmp	.+44     	; 0x13f8 <__floatsisf+0x6c>
    13cc:	88 23       	and	r24, r24
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <__floatsisf+0x48>
    13d0:	96 e9       	ldi	r25, 0x96	; 150
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <__floatsisf+0x6a>
    13d4:	77 23       	and	r23, r23
    13d6:	21 f0       	breq	.+8      	; 0x13e0 <__floatsisf+0x54>
    13d8:	9e e8       	ldi	r25, 0x8E	; 142
    13da:	87 2f       	mov	r24, r23
    13dc:	76 2f       	mov	r23, r22
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <__floatsisf+0x5e>
    13e0:	66 23       	and	r22, r22
    13e2:	71 f0       	breq	.+28     	; 0x1400 <__floatsisf+0x74>
    13e4:	96 e8       	ldi	r25, 0x86	; 134
    13e6:	86 2f       	mov	r24, r22
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	2a f0       	brmi	.+10     	; 0x13f8 <__floatsisf+0x6c>
    13ee:	9a 95       	dec	r25
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	da f7       	brpl	.-10     	; 0x13ee <__floatsisf+0x62>
    13f8:	88 0f       	add	r24, r24
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__fp_inf>:
    1402:	97 f9       	bld	r25, 7
    1404:	9f 67       	ori	r25, 0x7F	; 127
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	08 95       	ret

0000140e <__fp_nan>:
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	80 ec       	ldi	r24, 0xC0	; 192
    1412:	08 95       	ret

00001414 <__fp_pscA>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	16 16       	cp	r1, r22
    141a:	17 06       	cpc	r1, r23
    141c:	18 06       	cpc	r1, r24
    141e:	09 06       	cpc	r0, r25
    1420:	08 95       	ret

00001422 <__fp_pscB>:
    1422:	00 24       	eor	r0, r0
    1424:	0a 94       	dec	r0
    1426:	12 16       	cp	r1, r18
    1428:	13 06       	cpc	r1, r19
    142a:	14 06       	cpc	r1, r20
    142c:	05 06       	cpc	r0, r21
    142e:	08 95       	ret

00001430 <__fp_round>:
    1430:	09 2e       	mov	r0, r25
    1432:	03 94       	inc	r0
    1434:	00 0c       	add	r0, r0
    1436:	11 f4       	brne	.+4      	; 0x143c <__fp_round+0xc>
    1438:	88 23       	and	r24, r24
    143a:	52 f0       	brmi	.+20     	; 0x1450 <__fp_round+0x20>
    143c:	bb 0f       	add	r27, r27
    143e:	40 f4       	brcc	.+16     	; 0x1450 <__fp_round+0x20>
    1440:	bf 2b       	or	r27, r31
    1442:	11 f4       	brne	.+4      	; 0x1448 <__fp_round+0x18>
    1444:	60 ff       	sbrs	r22, 0
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__fp_round+0x20>
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	08 95       	ret

00001452 <__fp_split3>:
    1452:	57 fd       	sbrc	r21, 7
    1454:	90 58       	subi	r25, 0x80	; 128
    1456:	44 0f       	add	r20, r20
    1458:	55 1f       	adc	r21, r21
    145a:	59 f0       	breq	.+22     	; 0x1472 <__fp_splitA+0x10>
    145c:	5f 3f       	cpi	r21, 0xFF	; 255
    145e:	71 f0       	breq	.+28     	; 0x147c <__fp_splitA+0x1a>
    1460:	47 95       	ror	r20

00001462 <__fp_splitA>:
    1462:	88 0f       	add	r24, r24
    1464:	97 fb       	bst	r25, 7
    1466:	99 1f       	adc	r25, r25
    1468:	61 f0       	breq	.+24     	; 0x1482 <__fp_splitA+0x20>
    146a:	9f 3f       	cpi	r25, 0xFF	; 255
    146c:	79 f0       	breq	.+30     	; 0x148c <__fp_splitA+0x2a>
    146e:	87 95       	ror	r24
    1470:	08 95       	ret
    1472:	12 16       	cp	r1, r18
    1474:	13 06       	cpc	r1, r19
    1476:	14 06       	cpc	r1, r20
    1478:	55 1f       	adc	r21, r21
    147a:	f2 cf       	rjmp	.-28     	; 0x1460 <__fp_split3+0xe>
    147c:	46 95       	lsr	r20
    147e:	f1 df       	rcall	.-30     	; 0x1462 <__fp_splitA>
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <__fp_splitA+0x30>
    1482:	16 16       	cp	r1, r22
    1484:	17 06       	cpc	r1, r23
    1486:	18 06       	cpc	r1, r24
    1488:	99 1f       	adc	r25, r25
    148a:	f1 cf       	rjmp	.-30     	; 0x146e <__fp_splitA+0xc>
    148c:	86 95       	lsr	r24
    148e:	71 05       	cpc	r23, r1
    1490:	61 05       	cpc	r22, r1
    1492:	08 94       	sec
    1494:	08 95       	ret

00001496 <__fp_zero>:
    1496:	e8 94       	clt

00001498 <__fp_szero>:
    1498:	bb 27       	eor	r27, r27
    149a:	66 27       	eor	r22, r22
    149c:	77 27       	eor	r23, r23
    149e:	cb 01       	movw	r24, r22
    14a0:	97 f9       	bld	r25, 7
    14a2:	08 95       	ret

000014a4 <__gesf2>:
    14a4:	66 d0       	rcall	.+204    	; 0x1572 <__fp_cmp>
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <__gesf2+0x6>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__mulsf3>:
    14ac:	0b d0       	rcall	.+22     	; 0x14c4 <__mulsf3x>
    14ae:	c0 cf       	rjmp	.-128    	; 0x1430 <__fp_round>
    14b0:	b1 df       	rcall	.-158    	; 0x1414 <__fp_pscA>
    14b2:	28 f0       	brcs	.+10     	; 0x14be <__mulsf3+0x12>
    14b4:	b6 df       	rcall	.-148    	; 0x1422 <__fp_pscB>
    14b6:	18 f0       	brcs	.+6      	; 0x14be <__mulsf3+0x12>
    14b8:	95 23       	and	r25, r21
    14ba:	09 f0       	breq	.+2      	; 0x14be <__mulsf3+0x12>
    14bc:	a2 cf       	rjmp	.-188    	; 0x1402 <__fp_inf>
    14be:	a7 cf       	rjmp	.-178    	; 0x140e <__fp_nan>
    14c0:	11 24       	eor	r1, r1
    14c2:	ea cf       	rjmp	.-44     	; 0x1498 <__fp_szero>

000014c4 <__mulsf3x>:
    14c4:	c6 df       	rcall	.-116    	; 0x1452 <__fp_split3>
    14c6:	a0 f3       	brcs	.-24     	; 0x14b0 <__mulsf3+0x4>

000014c8 <__mulsf3_pse>:
    14c8:	95 9f       	mul	r25, r21
    14ca:	d1 f3       	breq	.-12     	; 0x14c0 <__mulsf3+0x14>
    14cc:	95 0f       	add	r25, r21
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	55 1f       	adc	r21, r21
    14d2:	62 9f       	mul	r22, r18
    14d4:	f0 01       	movw	r30, r0
    14d6:	72 9f       	mul	r23, r18
    14d8:	bb 27       	eor	r27, r27
    14da:	f0 0d       	add	r31, r0
    14dc:	b1 1d       	adc	r27, r1
    14de:	63 9f       	mul	r22, r19
    14e0:	aa 27       	eor	r26, r26
    14e2:	f0 0d       	add	r31, r0
    14e4:	b1 1d       	adc	r27, r1
    14e6:	aa 1f       	adc	r26, r26
    14e8:	64 9f       	mul	r22, r20
    14ea:	66 27       	eor	r22, r22
    14ec:	b0 0d       	add	r27, r0
    14ee:	a1 1d       	adc	r26, r1
    14f0:	66 1f       	adc	r22, r22
    14f2:	82 9f       	mul	r24, r18
    14f4:	22 27       	eor	r18, r18
    14f6:	b0 0d       	add	r27, r0
    14f8:	a1 1d       	adc	r26, r1
    14fa:	62 1f       	adc	r22, r18
    14fc:	73 9f       	mul	r23, r19
    14fe:	b0 0d       	add	r27, r0
    1500:	a1 1d       	adc	r26, r1
    1502:	62 1f       	adc	r22, r18
    1504:	83 9f       	mul	r24, r19
    1506:	a0 0d       	add	r26, r0
    1508:	61 1d       	adc	r22, r1
    150a:	22 1f       	adc	r18, r18
    150c:	74 9f       	mul	r23, r20
    150e:	33 27       	eor	r19, r19
    1510:	a0 0d       	add	r26, r0
    1512:	61 1d       	adc	r22, r1
    1514:	23 1f       	adc	r18, r19
    1516:	84 9f       	mul	r24, r20
    1518:	60 0d       	add	r22, r0
    151a:	21 1d       	adc	r18, r1
    151c:	82 2f       	mov	r24, r18
    151e:	76 2f       	mov	r23, r22
    1520:	6a 2f       	mov	r22, r26
    1522:	11 24       	eor	r1, r1
    1524:	9f 57       	subi	r25, 0x7F	; 127
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	8a f0       	brmi	.+34     	; 0x154c <__mulsf3_pse+0x84>
    152a:	e1 f0       	breq	.+56     	; 0x1564 <__mulsf3_pse+0x9c>
    152c:	88 23       	and	r24, r24
    152e:	4a f0       	brmi	.+18     	; 0x1542 <__mulsf3_pse+0x7a>
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	bb 1f       	adc	r27, r27
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	91 50       	subi	r25, 0x01	; 1
    153e:	50 40       	sbci	r21, 0x00	; 0
    1540:	a9 f7       	brne	.-22     	; 0x152c <__mulsf3_pse+0x64>
    1542:	9e 3f       	cpi	r25, 0xFE	; 254
    1544:	51 05       	cpc	r21, r1
    1546:	70 f0       	brcs	.+28     	; 0x1564 <__mulsf3_pse+0x9c>
    1548:	5c cf       	rjmp	.-328    	; 0x1402 <__fp_inf>
    154a:	a6 cf       	rjmp	.-180    	; 0x1498 <__fp_szero>
    154c:	5f 3f       	cpi	r21, 0xFF	; 255
    154e:	ec f3       	brlt	.-6      	; 0x154a <__mulsf3_pse+0x82>
    1550:	98 3e       	cpi	r25, 0xE8	; 232
    1552:	dc f3       	brlt	.-10     	; 0x154a <__mulsf3_pse+0x82>
    1554:	86 95       	lsr	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	e7 95       	ror	r30
    1560:	9f 5f       	subi	r25, 0xFF	; 255
    1562:	c1 f7       	brne	.-16     	; 0x1554 <__mulsf3_pse+0x8c>
    1564:	fe 2b       	or	r31, r30
    1566:	88 0f       	add	r24, r24
    1568:	91 1d       	adc	r25, r1
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	97 f9       	bld	r25, 7
    1570:	08 95       	ret

00001572 <__fp_cmp>:
    1572:	99 0f       	add	r25, r25
    1574:	00 08       	sbc	r0, r0
    1576:	55 0f       	add	r21, r21
    1578:	aa 0b       	sbc	r26, r26
    157a:	e0 e8       	ldi	r30, 0x80	; 128
    157c:	fe ef       	ldi	r31, 0xFE	; 254
    157e:	16 16       	cp	r1, r22
    1580:	17 06       	cpc	r1, r23
    1582:	e8 07       	cpc	r30, r24
    1584:	f9 07       	cpc	r31, r25
    1586:	c0 f0       	brcs	.+48     	; 0x15b8 <__fp_cmp+0x46>
    1588:	12 16       	cp	r1, r18
    158a:	13 06       	cpc	r1, r19
    158c:	e4 07       	cpc	r30, r20
    158e:	f5 07       	cpc	r31, r21
    1590:	98 f0       	brcs	.+38     	; 0x15b8 <__fp_cmp+0x46>
    1592:	62 1b       	sub	r22, r18
    1594:	73 0b       	sbc	r23, r19
    1596:	84 0b       	sbc	r24, r20
    1598:	95 0b       	sbc	r25, r21
    159a:	39 f4       	brne	.+14     	; 0x15aa <__fp_cmp+0x38>
    159c:	0a 26       	eor	r0, r26
    159e:	61 f0       	breq	.+24     	; 0x15b8 <__fp_cmp+0x46>
    15a0:	23 2b       	or	r18, r19
    15a2:	24 2b       	or	r18, r20
    15a4:	25 2b       	or	r18, r21
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <__fp_cmp+0x3e>
    15a8:	08 95       	ret
    15aa:	0a 26       	eor	r0, r26
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__fp_cmp+0x3e>
    15ae:	a1 40       	sbci	r26, 0x01	; 1
    15b0:	a6 95       	lsr	r26
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	81 1d       	adc	r24, r1
    15b6:	81 1d       	adc	r24, r1
    15b8:	08 95       	ret

000015ba <__prologue_saves__>:
    15ba:	2f 92       	push	r2
    15bc:	3f 92       	push	r3
    15be:	4f 92       	push	r4
    15c0:	5f 92       	push	r5
    15c2:	6f 92       	push	r6
    15c4:	7f 92       	push	r7
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	ca 1b       	sub	r28, r26
    15e4:	db 0b       	sbc	r29, r27
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	09 94       	ijmp

000015f2 <__epilogue_restores__>:
    15f2:	2a 88       	ldd	r2, Y+18	; 0x12
    15f4:	39 88       	ldd	r3, Y+17	; 0x11
    15f6:	48 88       	ldd	r4, Y+16	; 0x10
    15f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    15fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    15fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    15fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1600:	9b 84       	ldd	r9, Y+11	; 0x0b
    1602:	aa 84       	ldd	r10, Y+10	; 0x0a
    1604:	b9 84       	ldd	r11, Y+9	; 0x09
    1606:	c8 84       	ldd	r12, Y+8	; 0x08
    1608:	df 80       	ldd	r13, Y+7	; 0x07
    160a:	ee 80       	ldd	r14, Y+6	; 0x06
    160c:	fd 80       	ldd	r15, Y+5	; 0x05
    160e:	0c 81       	ldd	r16, Y+4	; 0x04
    1610:	1b 81       	ldd	r17, Y+3	; 0x03
    1612:	aa 81       	ldd	r26, Y+2	; 0x02
    1614:	b9 81       	ldd	r27, Y+1	; 0x01
    1616:	ce 0f       	add	r28, r30
    1618:	d1 1d       	adc	r29, r1
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	ed 01       	movw	r28, r26
    1626:	08 95       	ret

00001628 <__ftoa_engine>:
    1628:	28 30       	cpi	r18, 0x08	; 8
    162a:	08 f0       	brcs	.+2      	; 0x162e <__ftoa_engine+0x6>
    162c:	27 e0       	ldi	r18, 0x07	; 7
    162e:	33 27       	eor	r19, r19
    1630:	da 01       	movw	r26, r20
    1632:	99 0f       	add	r25, r25
    1634:	31 1d       	adc	r19, r1
    1636:	87 fd       	sbrc	r24, 7
    1638:	91 60       	ori	r25, 0x01	; 1
    163a:	00 96       	adiw	r24, 0x00	; 0
    163c:	61 05       	cpc	r22, r1
    163e:	71 05       	cpc	r23, r1
    1640:	39 f4       	brne	.+14     	; 0x1650 <__ftoa_engine+0x28>
    1642:	32 60       	ori	r19, 0x02	; 2
    1644:	2e 5f       	subi	r18, 0xFE	; 254
    1646:	3d 93       	st	X+, r19
    1648:	30 e3       	ldi	r19, 0x30	; 48
    164a:	2a 95       	dec	r18
    164c:	e1 f7       	brne	.-8      	; 0x1646 <__ftoa_engine+0x1e>
    164e:	08 95       	ret
    1650:	9f 3f       	cpi	r25, 0xFF	; 255
    1652:	30 f0       	brcs	.+12     	; 0x1660 <__ftoa_engine+0x38>
    1654:	80 38       	cpi	r24, 0x80	; 128
    1656:	71 05       	cpc	r23, r1
    1658:	61 05       	cpc	r22, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <__ftoa_engine+0x36>
    165c:	3c 5f       	subi	r19, 0xFC	; 252
    165e:	3c 5f       	subi	r19, 0xFC	; 252
    1660:	3d 93       	st	X+, r19
    1662:	91 30       	cpi	r25, 0x01	; 1
    1664:	08 f0       	brcs	.+2      	; 0x1668 <__ftoa_engine+0x40>
    1666:	80 68       	ori	r24, 0x80	; 128
    1668:	91 1d       	adc	r25, r1
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	1f 93       	push	r17
    1670:	0f 93       	push	r16
    1672:	ff 92       	push	r15
    1674:	ef 92       	push	r14
    1676:	19 2f       	mov	r17, r25
    1678:	98 7f       	andi	r25, 0xF8	; 248
    167a:	96 95       	lsr	r25
    167c:	e9 2f       	mov	r30, r25
    167e:	96 95       	lsr	r25
    1680:	96 95       	lsr	r25
    1682:	e9 0f       	add	r30, r25
    1684:	ff 27       	eor	r31, r31
    1686:	e6 53       	subi	r30, 0x36	; 54
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	99 27       	eor	r25, r25
    168c:	33 27       	eor	r19, r19
    168e:	ee 24       	eor	r14, r14
    1690:	ff 24       	eor	r15, r15
    1692:	a7 01       	movw	r20, r14
    1694:	e7 01       	movw	r28, r14
    1696:	05 90       	lpm	r0, Z+
    1698:	08 94       	sec
    169a:	07 94       	ror	r0
    169c:	28 f4       	brcc	.+10     	; 0x16a8 <__ftoa_engine+0x80>
    169e:	36 0f       	add	r19, r22
    16a0:	e7 1e       	adc	r14, r23
    16a2:	f8 1e       	adc	r15, r24
    16a4:	49 1f       	adc	r20, r25
    16a6:	51 1d       	adc	r21, r1
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	06 94       	lsr	r0
    16b2:	a1 f7       	brne	.-24     	; 0x169c <__ftoa_engine+0x74>
    16b4:	05 90       	lpm	r0, Z+
    16b6:	07 94       	ror	r0
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <__ftoa_engine+0x9c>
    16ba:	e7 0e       	add	r14, r23
    16bc:	f8 1e       	adc	r15, r24
    16be:	49 1f       	adc	r20, r25
    16c0:	56 1f       	adc	r21, r22
    16c2:	c1 1d       	adc	r28, r1
    16c4:	77 0f       	add	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	66 1f       	adc	r22, r22
    16cc:	06 94       	lsr	r0
    16ce:	a1 f7       	brne	.-24     	; 0x16b8 <__ftoa_engine+0x90>
    16d0:	05 90       	lpm	r0, Z+
    16d2:	07 94       	ror	r0
    16d4:	28 f4       	brcc	.+10     	; 0x16e0 <__ftoa_engine+0xb8>
    16d6:	f8 0e       	add	r15, r24
    16d8:	49 1f       	adc	r20, r25
    16da:	56 1f       	adc	r21, r22
    16dc:	c7 1f       	adc	r28, r23
    16de:	d1 1d       	adc	r29, r1
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	66 1f       	adc	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	06 94       	lsr	r0
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <__ftoa_engine+0xac>
    16ec:	05 90       	lpm	r0, Z+
    16ee:	07 94       	ror	r0
    16f0:	20 f4       	brcc	.+8      	; 0x16fa <__ftoa_engine+0xd2>
    16f2:	49 0f       	add	r20, r25
    16f4:	56 1f       	adc	r21, r22
    16f6:	c7 1f       	adc	r28, r23
    16f8:	d8 1f       	adc	r29, r24
    16fa:	99 0f       	add	r25, r25
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	06 94       	lsr	r0
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__ftoa_engine+0xc8>
    1706:	84 91       	lpm	r24, Z+
    1708:	10 95       	com	r17
    170a:	17 70       	andi	r17, 0x07	; 7
    170c:	41 f0       	breq	.+16     	; 0x171e <__ftoa_engine+0xf6>
    170e:	d6 95       	lsr	r29
    1710:	c7 95       	ror	r28
    1712:	57 95       	ror	r21
    1714:	47 95       	ror	r20
    1716:	f7 94       	ror	r15
    1718:	e7 94       	ror	r14
    171a:	1a 95       	dec	r17
    171c:	c1 f7       	brne	.-16     	; 0x170e <__ftoa_engine+0xe6>
    171e:	e0 e7       	ldi	r30, 0x70	; 112
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	68 94       	set
    1724:	15 90       	lpm	r1, Z+
    1726:	15 91       	lpm	r17, Z+
    1728:	35 91       	lpm	r19, Z+
    172a:	65 91       	lpm	r22, Z+
    172c:	95 91       	lpm	r25, Z+
    172e:	05 90       	lpm	r0, Z+
    1730:	7f e2       	ldi	r23, 0x2F	; 47
    1732:	73 95       	inc	r23
    1734:	e1 18       	sub	r14, r1
    1736:	f1 0a       	sbc	r15, r17
    1738:	43 0b       	sbc	r20, r19
    173a:	56 0b       	sbc	r21, r22
    173c:	c9 0b       	sbc	r28, r25
    173e:	d0 09       	sbc	r29, r0
    1740:	c0 f7       	brcc	.-16     	; 0x1732 <__ftoa_engine+0x10a>
    1742:	e1 0c       	add	r14, r1
    1744:	f1 1e       	adc	r15, r17
    1746:	43 1f       	adc	r20, r19
    1748:	56 1f       	adc	r21, r22
    174a:	c9 1f       	adc	r28, r25
    174c:	d0 1d       	adc	r29, r0
    174e:	7e f4       	brtc	.+30     	; 0x176e <__ftoa_engine+0x146>
    1750:	70 33       	cpi	r23, 0x30	; 48
    1752:	11 f4       	brne	.+4      	; 0x1758 <__ftoa_engine+0x130>
    1754:	8a 95       	dec	r24
    1756:	e6 cf       	rjmp	.-52     	; 0x1724 <__ftoa_engine+0xfc>
    1758:	e8 94       	clt
    175a:	01 50       	subi	r16, 0x01	; 1
    175c:	30 f0       	brcs	.+12     	; 0x176a <__ftoa_engine+0x142>
    175e:	08 0f       	add	r16, r24
    1760:	0a f4       	brpl	.+2      	; 0x1764 <__ftoa_engine+0x13c>
    1762:	00 27       	eor	r16, r16
    1764:	02 17       	cp	r16, r18
    1766:	08 f4       	brcc	.+2      	; 0x176a <__ftoa_engine+0x142>
    1768:	20 2f       	mov	r18, r16
    176a:	23 95       	inc	r18
    176c:	02 2f       	mov	r16, r18
    176e:	7a 33       	cpi	r23, 0x3A	; 58
    1770:	28 f0       	brcs	.+10     	; 0x177c <__ftoa_engine+0x154>
    1772:	79 e3       	ldi	r23, 0x39	; 57
    1774:	7d 93       	st	X+, r23
    1776:	2a 95       	dec	r18
    1778:	e9 f7       	brne	.-6      	; 0x1774 <__ftoa_engine+0x14c>
    177a:	10 c0       	rjmp	.+32     	; 0x179c <__ftoa_engine+0x174>
    177c:	7d 93       	st	X+, r23
    177e:	2a 95       	dec	r18
    1780:	89 f6       	brne	.-94     	; 0x1724 <__ftoa_engine+0xfc>
    1782:	06 94       	lsr	r0
    1784:	97 95       	ror	r25
    1786:	67 95       	ror	r22
    1788:	37 95       	ror	r19
    178a:	17 95       	ror	r17
    178c:	17 94       	ror	r1
    178e:	e1 18       	sub	r14, r1
    1790:	f1 0a       	sbc	r15, r17
    1792:	43 0b       	sbc	r20, r19
    1794:	56 0b       	sbc	r21, r22
    1796:	c9 0b       	sbc	r28, r25
    1798:	d0 09       	sbc	r29, r0
    179a:	98 f0       	brcs	.+38     	; 0x17c2 <__ftoa_engine+0x19a>
    179c:	23 95       	inc	r18
    179e:	7e 91       	ld	r23, -X
    17a0:	73 95       	inc	r23
    17a2:	7a 33       	cpi	r23, 0x3A	; 58
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <__ftoa_engine+0x180>
    17a6:	70 e3       	ldi	r23, 0x30	; 48
    17a8:	7c 93       	st	X, r23
    17aa:	20 13       	cpse	r18, r16
    17ac:	b8 f7       	brcc	.-18     	; 0x179c <__ftoa_engine+0x174>
    17ae:	7e 91       	ld	r23, -X
    17b0:	70 61       	ori	r23, 0x10	; 16
    17b2:	7d 93       	st	X+, r23
    17b4:	30 f0       	brcs	.+12     	; 0x17c2 <__ftoa_engine+0x19a>
    17b6:	83 95       	inc	r24
    17b8:	71 e3       	ldi	r23, 0x31	; 49
    17ba:	7d 93       	st	X+, r23
    17bc:	70 e3       	ldi	r23, 0x30	; 48
    17be:	2a 95       	dec	r18
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <__ftoa_engine+0x192>
    17c2:	11 24       	eor	r1, r1
    17c4:	ef 90       	pop	r14
    17c6:	ff 90       	pop	r15
    17c8:	0f 91       	pop	r16
    17ca:	1f 91       	pop	r17
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	99 27       	eor	r25, r25
    17d2:	87 fd       	sbrc	r24, 7
    17d4:	90 95       	com	r25
    17d6:	08 95       	ret

000017d8 <strnlen_P>:
    17d8:	fc 01       	movw	r30, r24
    17da:	05 90       	lpm	r0, Z+
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	70 40       	sbci	r23, 0x00	; 0
    17e0:	01 10       	cpse	r0, r1
    17e2:	d8 f7       	brcc	.-10     	; 0x17da <strnlen_P+0x2>
    17e4:	80 95       	com	r24
    17e6:	90 95       	com	r25
    17e8:	8e 0f       	add	r24, r30
    17ea:	9f 1f       	adc	r25, r31
    17ec:	08 95       	ret

000017ee <strnlen>:
    17ee:	fc 01       	movw	r30, r24
    17f0:	61 50       	subi	r22, 0x01	; 1
    17f2:	70 40       	sbci	r23, 0x00	; 0
    17f4:	01 90       	ld	r0, Z+
    17f6:	01 10       	cpse	r0, r1
    17f8:	d8 f7       	brcc	.-10     	; 0x17f0 <strnlen+0x2>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	8e 0f       	add	r24, r30
    1800:	9f 1f       	adc	r25, r31
    1802:	08 95       	ret

00001804 <fputc>:
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	8c 01       	movw	r16, r24
    180e:	eb 01       	movw	r28, r22
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	81 fd       	sbrc	r24, 1
    1814:	03 c0       	rjmp	.+6      	; 0x181c <fputc+0x18>
    1816:	0f ef       	ldi	r16, 0xFF	; 255
    1818:	1f ef       	ldi	r17, 0xFF	; 255
    181a:	1a c0       	rjmp	.+52     	; 0x1850 <fputc+0x4c>
    181c:	82 ff       	sbrs	r24, 2
    181e:	0d c0       	rjmp	.+26     	; 0x183a <fputc+0x36>
    1820:	2e 81       	ldd	r18, Y+6	; 0x06
    1822:	3f 81       	ldd	r19, Y+7	; 0x07
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	28 17       	cp	r18, r24
    182a:	39 07       	cpc	r19, r25
    182c:	64 f4       	brge	.+24     	; 0x1846 <fputc+0x42>
    182e:	e8 81       	ld	r30, Y
    1830:	f9 81       	ldd	r31, Y+1	; 0x01
    1832:	01 93       	st	Z+, r16
    1834:	f9 83       	std	Y+1, r31	; 0x01
    1836:	e8 83       	st	Y, r30
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <fputc+0x42>
    183a:	e8 85       	ldd	r30, Y+8	; 0x08
    183c:	f9 85       	ldd	r31, Y+9	; 0x09
    183e:	80 2f       	mov	r24, r16
    1840:	09 95       	icall
    1842:	89 2b       	or	r24, r25
    1844:	41 f7       	brne	.-48     	; 0x1816 <fputc+0x12>
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	9f 83       	std	Y+7, r25	; 0x07
    184e:	8e 83       	std	Y+6, r24	; 0x06
    1850:	c8 01       	movw	r24, r16
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <printf>:
    185c:	a2 e0       	ldi	r26, 0x02	; 2
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__prologue_saves__+0x20>
    1868:	fe 01       	movw	r30, r28
    186a:	37 96       	adiw	r30, 0x07	; 7
    186c:	61 91       	ld	r22, Z+
    186e:	71 91       	ld	r23, Z+
    1870:	fa 83       	std	Y+2, r31	; 0x02
    1872:	e9 83       	std	Y+1, r30	; 0x01
    1874:	af 01       	movw	r20, r30
    1876:	80 91 bf 01 	lds	r24, 0x01BF
    187a:	90 91 c0 01 	lds	r25, 0x01C0
    187e:	0e 94 42 05 	call	0xa84	; 0xa84 <vfprintf>
    1882:	22 96       	adiw	r28, 0x02	; 2
    1884:	e2 e0       	ldi	r30, 0x02	; 2
    1886:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__epilogue_restores__+0x20>

0000188a <puts>:
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	8c 01       	movw	r16, r24
    1894:	e0 91 bf 01 	lds	r30, 0x01BF
    1898:	f0 91 c0 01 	lds	r31, 0x01C0
    189c:	83 81       	ldd	r24, Z+3	; 0x03
    189e:	81 ff       	sbrs	r24, 1
    18a0:	1b c0       	rjmp	.+54     	; 0x18d8 <puts+0x4e>
    18a2:	c0 e0       	ldi	r28, 0x00	; 0
    18a4:	d0 e0       	ldi	r29, 0x00	; 0
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <puts+0x28>
    18a8:	09 95       	icall
    18aa:	89 2b       	or	r24, r25
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <puts+0x28>
    18ae:	cf ef       	ldi	r28, 0xFF	; 255
    18b0:	df ef       	ldi	r29, 0xFF	; 255
    18b2:	f8 01       	movw	r30, r16
    18b4:	81 91       	ld	r24, Z+
    18b6:	8f 01       	movw	r16, r30
    18b8:	60 91 bf 01 	lds	r22, 0x01BF
    18bc:	70 91 c0 01 	lds	r23, 0x01C0
    18c0:	db 01       	movw	r26, r22
    18c2:	18 96       	adiw	r26, 0x08	; 8
    18c4:	ed 91       	ld	r30, X+
    18c6:	fc 91       	ld	r31, X
    18c8:	19 97       	sbiw	r26, 0x09	; 9
    18ca:	81 11       	cpse	r24, r1
    18cc:	ed cf       	rjmp	.-38     	; 0x18a8 <puts+0x1e>
    18ce:	8a e0       	ldi	r24, 0x0A	; 10
    18d0:	09 95       	icall
    18d2:	89 2b       	or	r24, r25
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <puts+0x4e>
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <puts+0x52>
    18d8:	cf ef       	ldi	r28, 0xFF	; 255
    18da:	df ef       	ldi	r29, 0xFF	; 255
    18dc:	ce 01       	movw	r24, r28
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <snprintf>:
    18e8:	a0 e1       	ldi	r26, 0x10	; 16
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e7       	ldi	r30, 0x7A	; 122
    18ee:	fc e0       	ldi	r31, 0x0C	; 12
    18f0:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__prologue_saves__+0x1c>
    18f4:	0f 89       	ldd	r16, Y+23	; 0x17
    18f6:	18 8d       	ldd	r17, Y+24	; 0x18
    18f8:	89 8d       	ldd	r24, Y+25	; 0x19
    18fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18fc:	26 e0       	ldi	r18, 0x06	; 6
    18fe:	2c 83       	std	Y+4, r18	; 0x04
    1900:	1a 83       	std	Y+2, r17	; 0x02
    1902:	09 83       	std	Y+1, r16	; 0x01
    1904:	97 ff       	sbrs	r25, 7
    1906:	02 c0       	rjmp	.+4      	; 0x190c <snprintf+0x24>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e8       	ldi	r25, 0x80	; 128
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	ae 01       	movw	r20, r28
    1914:	43 5e       	subi	r20, 0xE3	; 227
    1916:	5f 4f       	sbci	r21, 0xFF	; 255
    1918:	58 8b       	std	Y+16, r21	; 0x10
    191a:	4f 87       	std	Y+15, r20	; 0x0f
    191c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    191e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 42 05 	call	0xa84	; 0xa84 <vfprintf>
    1928:	4d 81       	ldd	r20, Y+5	; 0x05
    192a:	5e 81       	ldd	r21, Y+6	; 0x06
    192c:	57 fd       	sbrc	r21, 7
    192e:	0a c0       	rjmp	.+20     	; 0x1944 <snprintf+0x5c>
    1930:	2f 81       	ldd	r18, Y+7	; 0x07
    1932:	38 85       	ldd	r19, Y+8	; 0x08
    1934:	42 17       	cp	r20, r18
    1936:	53 07       	cpc	r21, r19
    1938:	0c f4       	brge	.+2      	; 0x193c <snprintf+0x54>
    193a:	9a 01       	movw	r18, r20
    193c:	f8 01       	movw	r30, r16
    193e:	e2 0f       	add	r30, r18
    1940:	f3 1f       	adc	r31, r19
    1942:	10 82       	st	Z, r1
    1944:	60 96       	adiw	r28, 0x10	; 16
    1946:	e4 e0       	ldi	r30, 0x04	; 4
    1948:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__epilogue_restores__+0x1c>

0000194c <__ultoa_invert>:
    194c:	fa 01       	movw	r30, r20
    194e:	aa 27       	eor	r26, r26
    1950:	28 30       	cpi	r18, 0x08	; 8
    1952:	51 f1       	breq	.+84     	; 0x19a8 <__ultoa_invert+0x5c>
    1954:	20 31       	cpi	r18, 0x10	; 16
    1956:	81 f1       	breq	.+96     	; 0x19b8 <__ultoa_invert+0x6c>
    1958:	e8 94       	clt
    195a:	6f 93       	push	r22
    195c:	6e 7f       	andi	r22, 0xFE	; 254
    195e:	6e 5f       	subi	r22, 0xFE	; 254
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	af 4f       	sbci	r26, 0xFF	; 255
    1968:	b1 e0       	ldi	r27, 0x01	; 1
    196a:	3e d0       	rcall	.+124    	; 0x19e8 <__ultoa_invert+0x9c>
    196c:	b4 e0       	ldi	r27, 0x04	; 4
    196e:	3c d0       	rcall	.+120    	; 0x19e8 <__ultoa_invert+0x9c>
    1970:	67 0f       	add	r22, r23
    1972:	78 1f       	adc	r23, r24
    1974:	89 1f       	adc	r24, r25
    1976:	9a 1f       	adc	r25, r26
    1978:	a1 1d       	adc	r26, r1
    197a:	68 0f       	add	r22, r24
    197c:	79 1f       	adc	r23, r25
    197e:	8a 1f       	adc	r24, r26
    1980:	91 1d       	adc	r25, r1
    1982:	a1 1d       	adc	r26, r1
    1984:	6a 0f       	add	r22, r26
    1986:	71 1d       	adc	r23, r1
    1988:	81 1d       	adc	r24, r1
    198a:	91 1d       	adc	r25, r1
    198c:	a1 1d       	adc	r26, r1
    198e:	20 d0       	rcall	.+64     	; 0x19d0 <__ultoa_invert+0x84>
    1990:	09 f4       	brne	.+2      	; 0x1994 <__ultoa_invert+0x48>
    1992:	68 94       	set
    1994:	3f 91       	pop	r19
    1996:	2a e0       	ldi	r18, 0x0A	; 10
    1998:	26 9f       	mul	r18, r22
    199a:	11 24       	eor	r1, r1
    199c:	30 19       	sub	r19, r0
    199e:	30 5d       	subi	r19, 0xD0	; 208
    19a0:	31 93       	st	Z+, r19
    19a2:	de f6       	brtc	.-74     	; 0x195a <__ultoa_invert+0xe>
    19a4:	cf 01       	movw	r24, r30
    19a6:	08 95       	ret
    19a8:	46 2f       	mov	r20, r22
    19aa:	47 70       	andi	r20, 0x07	; 7
    19ac:	40 5d       	subi	r20, 0xD0	; 208
    19ae:	41 93       	st	Z+, r20
    19b0:	b3 e0       	ldi	r27, 0x03	; 3
    19b2:	0f d0       	rcall	.+30     	; 0x19d2 <__ultoa_invert+0x86>
    19b4:	c9 f7       	brne	.-14     	; 0x19a8 <__ultoa_invert+0x5c>
    19b6:	f6 cf       	rjmp	.-20     	; 0x19a4 <__ultoa_invert+0x58>
    19b8:	46 2f       	mov	r20, r22
    19ba:	4f 70       	andi	r20, 0x0F	; 15
    19bc:	40 5d       	subi	r20, 0xD0	; 208
    19be:	4a 33       	cpi	r20, 0x3A	; 58
    19c0:	18 f0       	brcs	.+6      	; 0x19c8 <__ultoa_invert+0x7c>
    19c2:	49 5d       	subi	r20, 0xD9	; 217
    19c4:	31 fd       	sbrc	r19, 1
    19c6:	40 52       	subi	r20, 0x20	; 32
    19c8:	41 93       	st	Z+, r20
    19ca:	02 d0       	rcall	.+4      	; 0x19d0 <__ultoa_invert+0x84>
    19cc:	a9 f7       	brne	.-22     	; 0x19b8 <__ultoa_invert+0x6c>
    19ce:	ea cf       	rjmp	.-44     	; 0x19a4 <__ultoa_invert+0x58>
    19d0:	b4 e0       	ldi	r27, 0x04	; 4
    19d2:	a6 95       	lsr	r26
    19d4:	97 95       	ror	r25
    19d6:	87 95       	ror	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	ba 95       	dec	r27
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <__ultoa_invert+0x86>
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	61 05       	cpc	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	08 95       	ret
    19e8:	9b 01       	movw	r18, r22
    19ea:	ac 01       	movw	r20, r24
    19ec:	0a 2e       	mov	r0, r26
    19ee:	06 94       	lsr	r0
    19f0:	57 95       	ror	r21
    19f2:	47 95       	ror	r20
    19f4:	37 95       	ror	r19
    19f6:	27 95       	ror	r18
    19f8:	ba 95       	dec	r27
    19fa:	c9 f7       	brne	.-14     	; 0x19ee <__ultoa_invert+0xa2>
    19fc:	62 0f       	add	r22, r18
    19fe:	73 1f       	adc	r23, r19
    1a00:	84 1f       	adc	r24, r20
    1a02:	95 1f       	adc	r25, r21
    1a04:	a0 1d       	adc	r26, r0
    1a06:	08 95       	ret

00001a08 <_exit>:
    1a08:	f8 94       	cli

00001a0a <__stop_program>:
    1a0a:	ff cf       	rjmp	.-2      	; 0x1a0a <__stop_program>
